{
  "openapi": "3.0.1",
  "info": {
    "title": "ProjectSight",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://global.api.trimble.com/projectsight/v1",
      "description": "Global"
    }
  ],
  "paths": {
    "/accounts": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Accounts",
        "description": "Returns the list of Accounts that the caller may use to create new Portfolios",
        "operationId": "Account_GetAccounts",
        "responses": {
          "200": {
            "description": "Returns the current user's list of Account information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/portfolios": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Portfolios for the specific account",
        "description": "Returns the complete list of user accessible Portfolios that are associated with the specified Account",
        "operationId": "Account_GetPortfoliosForAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The primary key of the ProjectSight account record that information is to be returned for",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeDisabled",
            "in": "query",
            "description": "When true, Portfolios that have been disabled will be returned. These can be identified using the Disabled property",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeOffline",
            "in": "query",
            "description": "When true, Portfolios that are currently offline for maintenance will be returned. These can be identified using the IsOnline property",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current user's list of Portfolio within the Account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Portfolio"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Portfolio"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/actionitems/{actionItemId}": {
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get Individual ActionItem Record",
        "description": "Returns the specified Action Item that the user has access to within the specified portfolio and project.",
        "operationId": "ActionItem_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actionItemId",
            "in": "path",
            "description": "ActionItem ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Action Item within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionItem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Delete Individual Action Item Record",
        "description": "Returns the result of deletion",
        "operationId": "ActionItem_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "actionItemId",
            "in": "path",
            "description": "ActionItem ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested ActionItem is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/actionitems": {
      "post": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Creates/Updates Individual ActionItem",
        "description": "Returns the created/updated Action Item given by the user",
        "operationId": "ActionItem_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionItem"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionItem"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionItem"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionItem"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible ActionItem within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionItem"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get Collection of ActionItem Records, including all children.",
        "description": "Returns the list of user accessible Action Item records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ActionItem_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible ActionItem information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/actionitems/query": {
      "post": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get Collection of ActionItem Records, including all children, based on a query request",
        "description": "Returns the list of user accessible Action Item records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ActionItem_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible ActionItem records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/actionitems/list": {
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get Collection of ActionItem Records, not including their children.",
        "description": "Returns the list of user accessible Action Item records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ActionItem_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible ActionItem records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/actionitems/list": {
      "post": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get Collection of ActionItem Records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Action Item records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ActionItem_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "The Server cannot fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Action Item records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/actionitems/workflowstates": {
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get WorkflowStates to be used in ActionItems",
        "description": "Returns the list of Workflow Statuses for Action Items within the specified Portfolio and Project.",
        "operationId": "ActionItem_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime - optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the WorkflowStates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/actionitems/reports": {
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get the list of all available Reports for ActionItems",
        "description": "Returns the list of user accessible Reports for Action Items",
        "operationId": "ActionItem_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/actionitems/udfs": {
      "get": {
        "tags": [
          "ActionItem"
        ],
        "summary": "Get list of all available UDFs for ActionItems",
        "description": "Returns the list of UDFs for Action Items",
        "operationId": "ActionItem_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment/{applicationForPayId}": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get Individual ApplicationForPayment Record",
        "description": "Returns the requested Application For Payment that the user has access to within the specified portfolio and project.",
        "operationId": "ApplicationForPayment_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationForPayId",
            "in": "path",
            "description": "ApplicationForPayment ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Application For Payment that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Delete Individual ApplicationForPayment Record",
        "description": "Returns the result of deletion",
        "operationId": "ApplicationForPayment_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationForPayId",
            "in": "path",
            "description": "ApplicationForPayment ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested ApplicationForPayment is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get Collection of ApplicationForPayment records, including all children.",
        "description": "Returns the list of user accessible Application For Payment records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ApplicationForPayment_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible ApplicationForPayment records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Creates/Updates Individual ApplicationForPayment",
        "description": "Returns the created/updated Application For Payment record that the user has access to within the specified portfolio and project.",
        "operationId": "ApplicationForPayment_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForPayment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForPayment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForPayment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationForPayment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Application For Payment records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/applicationsForPayment/query": {
      "post": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get Collection of ApplicationForPayment, including all children, based on a query request.",
        "description": "Returns the list of user accessible Application For Payment records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ApplicationForPayment_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible ApplicationForPayment records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment/list": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get Collection of ApplicationForPayment records, not including their children.",
        "description": "Returns the list of user accessible Application For Payment records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ApplicationForPayment_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible ApplicationForPayment records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/applicationsForPayment/list": {
      "post": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get Collection of ApplicationForPayment records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible ApplicationForPayment records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ApplicationForPayment_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible ApplicationForPayment records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment/{applicationForPayId}/primecontractcos": {
      "post": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Adds a list of PrimeContractCOs to a specific ApplicationForPayment",
        "description": "Adds a list of Prime Contract Change Orders to a specific Application For Payment and returns the updated Application For Payment record.",
        "operationId": "ApplicationForPayment_AddPrimeContractCOs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationForPayId",
            "in": "path",
            "description": "ApplicationForPayment ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The list of PrimeContractCO ChangeOrderIDs to add to the Application For Payment",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Application For Payment records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationForPayment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment/createItemsFromContract": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Creates a list of ApplicationForPaymentItems from the specified Contract",
        "description": "Returns a collection of Application For Payment Items from the Contract that can be added to an Application For Payment.",
        "operationId": "ApplicationForPayment_CreateApplicationForPayItemsFromContract",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contractId",
            "in": "query",
            "description": "Contract ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a collection of ApplicationForPaymentItems from the contract that can be added to an ApplicationForPayment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationForPayment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/applicationsForPayment/workflowstates": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get WorkflowStates for ApplicationForPayment Record",
        "description": "Returns the list of Workflow Statuses for Application For Payment within the specified Portfolio and Project.",
        "operationId": "ApplicationForPayment_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the WorkflowStates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/applicationsForPayment/reports": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get list of all available Reports for ApplicationForPayment",
        "description": "Returns the list of user accessible Reports for Application For Payment",
        "operationId": "ApplicationForPayment_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/applicationsForPayment/udfs": {
      "get": {
        "tags": [
          "ApplicationForPayment"
        ],
        "summary": "Get list of all available UDFs for ApplicationForPayment",
        "description": "Returns the list of UDFs for Application For Payment",
        "operationId": "ApplicationForPayment_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgets/{budgetId}": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get Individual Budget Record",
        "description": "Returns the requested Budget that the user has access to within the specified portfolio and project.",
        "operationId": "Budget_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "budgetId",
            "in": "path",
            "description": "Budget ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Budget that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Budget"
        ],
        "summary": "Delete Individual Budget Record",
        "description": "Returns the result of deletion",
        "operationId": "Budget_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "budgetId",
            "in": "path",
            "description": "Budget ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Budget is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgets": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get Collection of Budget records, including all children.",
        "description": "Returns the list of user accessible budget information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Budget_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Budget information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Budget"
        ],
        "summary": "Creates/Updates Individual Budget",
        "description": "Returns the created/updated Budget information that the user has access to within the specified portfolio and project.",
        "operationId": "Budget_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Budget information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Budget"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/budgets/query": {
      "post": {
        "tags": [
          "Budget"
        ],
        "summary": "Get Collection of Budget records (including all children) based on a query request.",
        "description": "Returns the list of user accessible budget information for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Budget_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Budget information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgets/list": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get Collection of Budget records, not including their children.",
        "description": "Returns the list of user accessible budget information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Budget_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Budget information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/budgets/list": {
      "post": {
        "tags": [
          "Budget"
        ],
        "summary": "Get Collection of Budget records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible budget information for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Budget_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Budget information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgets/workflowstates": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get WorkflowStates for Budget Record",
        "description": "Returns the list of Workflow Statuses for Budget within the specified Portfolio and Project.",
        "operationId": "Budget_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/budgets/reports": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get list of all available Reports for Budget",
        "description": "Returns the list of user accessible Reports for Budget",
        "operationId": "Budget_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/budgets/udfs": {
      "get": {
        "tags": [
          "Budget"
        ],
        "summary": "Get list of all available UDFs for Budget",
        "description": "Returns the list of UDFs for Budget",
        "operationId": "Budget_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetcodestructure": {
      "get": {
        "tags": [
          "BudgetCodeStructure"
        ],
        "summary": "Get BudgetCodeStructures for Project",
        "description": "Returns user accessible list of BudgetCodeStructure for Portfolio and Project.",
        "operationId": "BudgetCodeStructure_GetBudgetCodeStructure",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible Budget Code Structure for Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetCodeStructureItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetCodeStructureItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetgroups": {
      "get": {
        "tags": [
          "BudgetGroup"
        ],
        "summary": "Get Budget Groups For Individual Project.",
        "description": "Returns the user accessible list of Budget Groups within the specified Portfolio and Project.",
        "operationId": "BudgetGroup_Get",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Budget Group within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetgroups/{groupId}": {
      "get": {
        "tags": [
          "BudgetGroup"
        ],
        "summary": "Get Budget Group Entries For Specific Group",
        "description": "Returns the user accessible list of Budget Group Entries for a given Budget Group within the specified Portfolio and Project",
        "operationId": "BudgetGroup_GetByGroupId",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "The Group level. Values from 1 to 9",
            "required": true,
            "schema": {
              "maximum": 9,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Budget Group Entries for a given Budget Group within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetGroup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetGroup"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "BudgetGroup"
        ],
        "summary": "Create Individual Budget Group Record",
        "description": "Returns created Budget Group with Budget Group for the specified Budget Group Type within the specified Portfolio and Project.",
        "operationId": "BudgetGroup_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Budget Group ID",
            "required": true,
            "schema": {
              "maximum": 9,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Budget Group Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetGroup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetGroup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetGroup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetGroup"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created Budget Group for the specified Budget Group Type within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetGroup"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BudgetGroup"
        ],
        "summary": "Delete Individual Budget Group Record",
        "description": "Returns the result of deletion",
        "operationId": "BudgetGroup_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Budget Group ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Budget group record is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetSnapshots": {
      "post": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Creates a new budget snapshot for the current project",
        "operationId": "BudgetSnapshot_Create",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the snapshot to create. This is not required to be unique in the project. Leading and trailing whitespace will be removed.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the top level information for the newly created snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetSnapshot"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetSnapshot"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Updates an existing budget snapshot for the current project",
        "description": "The snapshot to update must be provided in the body",
        "operationId": "BudgetSnapshot_Update",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetSnapshot"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetSnapshot"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetSnapshot"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BudgetSnapshot"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the result of the operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Get the list of available snapshots in a project",
        "description": "Returns the list of user accessible budget snapshots in a project.\r\nThis only returns the top-level snapshot information",
        "operationId": "BudgetSnapshot_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Budget snapshots.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshot"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshot"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetSnapshots/{snapshotId}": {
      "delete": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Deletes a budget snapshot",
        "operationId": "BudgetSnapshot_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The primary key of the record to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the result of the operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetSnapshots/{snapshotId}/items": {
      "get": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Get the list of snapshot items in a snapshot",
        "description": "A snapshot item is a copy of the budget record.\r\nThis does not retrieve transactions",
        "operationId": "BudgetSnapshot_GetItems",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The primary key of the record to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list snapshot items for the snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshotItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshotItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/budgetSnapshots/{snapshotId}/items/{snapshotItemId}/transactions": {
      "get": {
        "tags": [
          "BudgetSnapshot"
        ],
        "summary": "Get the list of snapshot transactions for a snapshot item",
        "description": "A snapshot transaction is a line item that contributes to the values recorded in the budget",
        "operationId": "BudgetSnapshot_GetTransactions",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The primary key of the record to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "snapshotItemId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list snapshot items for the snapshot.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshotTransaction"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetSnapshotTransaction"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/changeOrderRequests/{coRequestId}": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get Individual ChangeOrderRequest Record",
        "description": "Returns the requested Change Order Request that the user has access to within the specified portfolio and project.",
        "operationId": "ChangeOrderRequest_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coRequestId",
            "in": "path",
            "description": "ChangeOrderRequest ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested ChangeOrderRequest that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOrderRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOrderRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Delete Individual ChangeOrderRequest Record",
        "description": "Returns the result of deletion",
        "operationId": "ChangeOrderRequest_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "coRequestId",
            "in": "path",
            "description": "ChangeOrderRequest ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested ChangeOrderRequest is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/changeOrderRequests": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get Collection of ChangeOrderRequest records, including all children.",
        "description": "Returns the list of user accessible Change Order Request records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ChangeOrderRequest_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Change Order Request records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Creates/Updates Individual ChangeOrderRequest",
        "description": "Returns the created/updated Change Order Request records that the user has access to within the specified portfolio and project.",
        "operationId": "ChangeOrderRequest_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Change Order Request records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOrderRequest"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeOrderRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/changeOrderRequests/query": {
      "post": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get Collection of ChangeOrderRequest records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Change Order Request records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ChangeOrderRequest_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Change Order Request records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/changeOrderRequests/list": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get Collection of ChangeOrderRequest records, not including their children.",
        "description": "Returns the list of user accessible Change Order Request records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records.",
        "operationId": "ChangeOrderRequest_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Change Order Request records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/changeOrderRequests/list": {
      "post": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get Collection of ChangeOrderRequest records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Change Order Request records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records.",
        "operationId": "ChangeOrderRequest_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Change Order Request records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeOrderRequest"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/changeOrderRequests/workflowstates": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get WorkflowStates for ChangeOrderRequest Record",
        "description": "Returns the list of Workflow Statuses for Change Order Request within the specified Portfolio and Project.",
        "operationId": "ChangeOrderRequest_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/changeOrderRequests/reports": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get list of all available reports for ChangeOrderRequest",
        "description": "Returns the list of user accessible Reports for Change Order Requests",
        "operationId": "ChangeOrderRequest_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/changeOrderRequests/udfs": {
      "get": {
        "tags": [
          "ChangeOrderRequest"
        ],
        "summary": "Get list of all available UDFs for ChangeOrderRequest",
        "description": "Returns the list of UDFs for the Change Order Request",
        "operationId": "ChangeOrderRequest_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/checklists/{checklistId}": {
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get Individual Checklist Record",
        "description": "Returns the specified Checklist that the user has access to within the specified portfolio and project",
        "operationId": "Checklist_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "description": "Checklist ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns details about the requested Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Checklist"
        ],
        "summary": "Delete Individual Checklist Record",
        "description": "Returns the result of deletion",
        "operationId": "Checklist_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checklistId",
            "in": "path",
            "description": "Checklist Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Checklist is deleted."
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Provided input is not valid"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/checklists": {
      "post": {
        "tags": [
          "Checklist"
        ],
        "summary": "Create Individual Checklist",
        "description": "Returns the created Checklist given by the user",
        "operationId": "Checklist_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Checklist Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Checklist"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Checklist"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Checklist"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Checklist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns details about the requested checklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Checklist"
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get Collection of CheckList Records, including all children.",
        "description": "Returns the requested list of Checklists that the user has access to within the specified portfolio and project.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Checklist_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records want to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records want to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the detail about the requested Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/checklists/query": {
      "post": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get Collection of CheckList Records, including all children, based on a query request.",
        "description": "Returns the requested list of Checklists that the user has access to within the specified portfolio and project.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Checklist_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the detail about the requested Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/checklists/list": {
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get Collection of CheckList Records, not including their children.",
        "description": "Returns the requested list of Checklists that the user has access to within the specified portfolio and project.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Checklist_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records want to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records want to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the detail about the requested Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/checklists/list": {
      "post": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get Collection of CheckList Records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the requested list of Checklists that the user has access to within the specified portfolio and project.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Checklist_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the detail about the requested Checklist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Checklist"
                  }
                }
              }
            }
          },
          "401": {
            "description": "User does not have access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "User does not have the required permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "User does not have any portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/checklists/workflowstates": {
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get WorkflowStates for CheckList Record",
        "description": "Returns the list of Workflow Statuses for Checklist within the specified Portfolio and Project.",
        "operationId": "Checklist_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/checklists/reports": {
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get list of all available reports for Checklist",
        "description": "Returns the list of user accessible Reports for Checklist",
        "operationId": "Checklist_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/checklists/udfs": {
      "get": {
        "tags": [
          "Checklist"
        ],
        "summary": "Get list of all available UDFs for Checklist",
        "description": "Returns the list of UDFs for Checklist",
        "operationId": "Checklist_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get Individual Company Record",
        "description": "Returns the requested user accessible Company Record",
        "operationId": "Company_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Company Information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Delete Individual Company Record",
        "description": "Returns the result of deletion",
        "operationId": "Company_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "companyId",
            "in": "path",
            "description": "Company ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested Company is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Creates/Updates Individual Company Record",
        "description": "Returns the created/updated Company record.",
        "operationId": "Company_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated Company information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get Collection of Company records, including all children.",
        "description": "Returns the list of user accessible Company information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four companies.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Company_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Company information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies/query": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Get Collection of Company records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Company information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four companies.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Company_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Company information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies/list": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get Collection of Company records, not including their children.",
        "description": "Returns the list of user accessible Company information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four companies.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Company_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Company information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Get Collection of Company records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Company information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four companies.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Company_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Company information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies/reports": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get list of all available reports for Company",
        "description": "Returns the list of user accessible Reports for Company",
        "operationId": "Company_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Companies/udfs": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get list of all available UDFs for Company",
        "description": "Returns the list of UDFs for Company",
        "operationId": "Company_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Contacts/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get Individual Contact record",
        "description": "Returns the requested user accessible Contact Record.",
        "operationId": "Contact_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Contact Information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Contacts/list": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get Collection of Contact records, not including their children.",
        "description": "Returns the list of user accessible Contact information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four Contacts.",
        "operationId": "Contact_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contact information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Get Collection of Contact records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Contact information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four Contacts.",
        "operationId": "Contact_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contact information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/Contacts/udfs": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get list of all available UDFs for Contact",
        "description": "Returns the list of UDFs for Contact",
        "operationId": "Contact_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contracts/{contractId}": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get Individual Contract Record",
        "description": "Returns the requested Contract that the user has access to within the specified portfolio and project.",
        "operationId": "Contract_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Contract that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contract"
        ],
        "summary": "Delete Individual Contract Record",
        "description": "Returns the result of deletion",
        "operationId": "Contract_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Contract is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contracts": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get Collection of Contract records, including all children.",
        "description": "Returns the list of user accessible Contract information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Contract_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Creates/Updates Individual Contract",
        "description": "Returns the created/updated Contract information that the user has access to within the specified portfolio and project.",
        "operationId": "Contract_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Contract"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Contract"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Contract"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Contract"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Contract information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contracts/query": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Get Collection of Contract records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Contract information for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Contract_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contracts/list": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get Collection of Contract records, not including their children.",
        "description": "Returns the list of user accessible Contract information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "Contract_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contracts/list": {
      "post": {
        "tags": [
          "Contract"
        ],
        "summary": "Get Collection of Contract records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Contract information for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Contract_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contracts/workflowstates": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get WorkflowStates for Contract Record",
        "description": "Returns the list of Workflow Statuses for Contract within the specified Portfolio and Project.",
        "operationId": "Contract_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contracts/reports": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get list of all available reports for Contract",
        "description": "Returns the list of user accessible Reports for Contract",
        "operationId": "Contract_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contracts/udfs": {
      "get": {
        "tags": [
          "Contract"
        ],
        "summary": "Get list of all available UDFs for Contract",
        "description": "Returns the list of UDFs for Contract",
        "operationId": "Contract_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contractInvoices/{invoiceId}": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get Individual ContractInvoice Record",
        "description": "Returns the requested Contract Invoice that the user has access to within the specified portfolio and project.",
        "operationId": "ContractInvoice_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "ContractInvoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested ContractInvoice that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Delete Individual ContractInvoice Record",
        "description": "Returns the result of deletion",
        "operationId": "ContractInvoice_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "ContractInvoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested ContractInvoice is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contractInvoices": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get Collection of ContractInvoice records, including all children.",
        "description": "Returns the list of user accessible Contract Invoice records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ContractInvoice_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract Invoice records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Creates/Updates Individual ContractInvoice",
        "description": "Returns the created/updated Contract Invoice records that the user has access to within the specified portfolio and project.",
        "operationId": "ContractInvoice_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractInvoice"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractInvoice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContractInvoice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Contract Invoice records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contractInvoices/query": {
      "post": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get Collection of ContractInvoice records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Contract Invoice records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "ContractInvoice_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract Invoice records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contractInvoices/list": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get Collection of ContractInvoice records, not including their children.",
        "description": "Returns the list of user accessible Contract Invoice records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ContractInvoice_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract Invoice records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contractInvoices/list": {
      "post": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get Collection of ContractInvoice records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Contract Invoice records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "ContractInvoice_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Contract Invoice records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contractInvoices/{contractInvoiceId}/subcontractcos": {
      "post": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Adds a list of SubContractCOs to a specific ContractInvoice",
        "description": "Adds a list of SubContract Change Orders to a specified Contract Invoice and returns the updated Contract Invoice.",
        "operationId": "ContractInvoice_AddSubContractCOs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "contractInvoiceId",
            "in": "path",
            "description": "Contract Invoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The list of SubContractCO ChangeOrderIDs to add to the Application For Payment",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Contract Invoice records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/contractInvoices/workflowstates": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get WorkflowStates for ContractInvoice Record",
        "description": "Returns the list of Workflow Statuses for ContractInvoice within the specified Portfolio and Project.",
        "operationId": "ContractInvoice_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contractInvoices/reports": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get list of all available reports for ContractInvoice",
        "description": "Returns the list of user accessible Reports for ContractInvoice",
        "operationId": "ContractInvoice_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/contractInvoices/udfs": {
      "get": {
        "tags": [
          "ContractInvoice"
        ],
        "summary": "Get list of all available UDFs for ContractInvoice",
        "description": "Returns the list of UDFs for ContractInvoice",
        "operationId": "ContractInvoice_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/dailyreports/{dailyReportId}": {
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get Individual DailyReport Record",
        "description": "Returns the specified Daily Report that the user has access to within the specified portfolio and project.",
        "operationId": "DailyReport_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dailyReportId",
            "in": "path",
            "description": "DailyReport Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyReport"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Delete Individual DailyReport Record",
        "description": "Returns the result of deletion",
        "operationId": "DailyReport_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dailyReportId",
            "in": "path",
            "description": "DailyReport Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Daily Report is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/dailyreports": {
      "post": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Creates/Updates Individual DailyReport",
        "description": "Returns the created/updated Daily Report information that the user has access to within the specified portfolio and project.",
        "operationId": "DailyReport_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "DailyReport Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DailyReport"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyReport"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DailyReport"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DailyReport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyReport"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DailyReport"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get Collection of DailyReport records, including all children.",
        "description": "Returns the list of user accessible Daily Report records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "DailyReport_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records want to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/dailyreports/query": {
      "post": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get Collection of DailyReport records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Daily Report records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "DailyReport_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/dailyreports/list": {
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get Collection of DailyReport records, not including their children.",
        "description": "Returns the list of user accessible Daily Report records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "DailyReport_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records want to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/dailyreports/list": {
      "post": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get Collection of DailyReport records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Daily Report records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "DailyReport_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested Daily Report that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DailyReport"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/dailyreports/workflowstates": {
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get WorkflowStates for DailyReport Record",
        "description": "Returns list of Workflow Statuses for DailyReport within the specified Portfolio and Project.",
        "operationId": "DailyReport_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/dailyreports/reports": {
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get list of all available reports for DailyReport",
        "description": "Returns the list of user accessible Reports for DailyReport",
        "operationId": "DailyReport_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/dailyreports/udfs": {
      "get": {
        "tags": [
          "DailyReport"
        ],
        "summary": "Get list of all available UDFs for DailyReport",
        "description": "Returns the list of UDFs for DailyReport",
        "operationId": "DailyReport_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/{drawingId}": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get an Individual Drawings Record",
        "description": "Returns the requested Drawing information that the user has access to within the specified portfolio and project.",
        "operationId": "Drawing_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingId",
            "in": "path",
            "description": "Drawings ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested Drawing information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Drawing"
        ],
        "summary": "Delete Individual Drawing Record",
        "description": "Returns the result of deletion",
        "operationId": "Drawing_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingId",
            "in": "path",
            "description": "Drawing ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Drawing is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/currentForSeries/{drawingSeriesId}": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get the current Drawing record for a Drawing Series",
        "description": "A user can link a record to the current Drawing in a series in the user interface applications. This type of link will be displayed in RecordLinks with a TableType of 57 (DrawingSeries).\r\nEach Drawing also has a reference to its series, so this method can also be used to retrieve the current Drawing record in a given Drawing's series.",
        "operationId": "Drawing_GetByDrawingSeriesId",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The primary key for the Portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The primary key for the Project",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingSeriesId",
            "in": "path",
            "description": "The primary key for the DrawingSeries",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the current Drawing for the specified DrawingSeriesId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get a Collection of Drawing records, including all children.",
        "description": "Returns the requested list of user accessible Drawings based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Drawing_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to be fetched after the specified offset.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Drawings based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Drawing"
        ],
        "summary": "Updates an Individual Drawings Record",
        "description": "Returns the updated user accessible Drawing records within the specified Portfolio and Project.",
        "operationId": "Drawing_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Drawing"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Drawing"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Drawing"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Drawing"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the updated user accessible Drawings record within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Drawing"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawings/query": {
      "post": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get a Collection of Drawing records, including all children, based on a query request.",
        "description": "Returns the requested list of user accessible Drawings based on the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Drawing_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Drawings based on the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/list": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get a Collection of Drawing records, not including their children.",
        "description": "Returns the requested list of user accessible Drawings based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Drawing_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to be fetched after the specified offset.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Drawings based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawings/list": {
      "post": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get a Collection of Drawing records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the requested list of user accessible Drawings based on the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Drawing_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Drawings based on the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Drawing"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/{drawingId}/content": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Download an Individual Drawing File Content",
        "description": "Returns the requested user accessible Drawing File content within the specified Portfolio and Project.",
        "operationId": "Drawing_GetDrawingFile",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingId",
            "in": "path",
            "description": "Drawing ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "Redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible Drawing File content within the specified Portfolio and Project.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/workflowstates": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get WorkflowStates for Drawing Record",
        "description": "Returns the list of Workflow Statuses for Drawing within the specified Portfolio and Project.",
        "operationId": "Drawing_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user list of accessible workflowstates for Drawings within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/{drawingId}/contentWithAnnotations": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Download the Drawing File Content with Annotations",
        "description": "Returns the requested user accessible Drawing File content with Annotations within the specified Portfolio and Project.",
        "operationId": "Drawing_GetFlattenedDrawingFile",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingId",
            "in": "path",
            "description": "Drawing ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "annotationLabels",
            "in": "query",
            "description": "Include Annotation Labels",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "Redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible Drawing File content within the specified Portfolio and Project.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawings/reports": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get list of all available reports for Drawing",
        "description": "Returns the list of user accessible Reports for Drawing",
        "operationId": "Drawing_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawings/udfs": {
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Get list of all available UDFs for Drawing",
        "description": "Returns the list of UDFs for Drawing",
        "operationId": "Drawing_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/download": {
      "post": {
        "tags": [
          "Drawing"
        ],
        "summary": "Submit a request to initiate the asynchronous download of one or more drawings",
        "operationId": "Drawing_InitiateDownload",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing information on which records to download and options to control the output.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingDownloadRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingDownloadRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingDownloadRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingDownloadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "202": {
            "description": "Returns the request identifier that can be used to retrieve the resultant report once the generation has completed."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawings/download/{id}": {
      "delete": {
        "tags": [
          "Drawing"
        ],
        "summary": "Delete the executing report generation request",
        "operationId": "Drawing_DeleteReportRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Drawing"
        ],
        "summary": "Retrieves the file generated as a result of the generation request. If the request has not completed yet or has completed with errors, the appropriate response code will be returned.",
        "description": "Returns the Drawing Content that was generated",
        "operationId": "Drawing_GetGeneratedReportContent",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "Redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the generated report content."
          },
          "202": {
            "description": "The report is still being processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "An error occurred during the generation of the report. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "410": {
            "description": "The report request has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get Collection of DrawingSet records, including all children.",
        "description": "Returns the list of user accessible Drawing Set records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "DrawingSet_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Drawing Set records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Creates/Updates Individual DrawingSet",
        "description": "Returns the created/updated user accessible Drawing Set within the specified Portfolio and Project.",
        "operationId": "DrawingSet_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingSet"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingSet"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingSet"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DrawingSet"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible DrawingSet within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawingsets/query": {
      "post": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get Collection of DrawingSet records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Drawing Set records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "DrawingSet_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Drawing Set records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets/list": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get Collection of DrawingSet records, not including their children.",
        "description": "Returns the list of user accessible Drawing Set records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "DrawingSet_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Drawing Set records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawingsets/list": {
      "post": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get Collection of DrawingSet records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Drawing Set records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "DrawingSet_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Drawing Set records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DrawingSet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets/{drawingSetId}": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get Individual DrawingSet",
        "description": "Returns the specified Drawing Set that the user has access to within the specified portfolio and project.",
        "operationId": "DrawingSet_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingSetId",
            "in": "path",
            "description": "DrawingSet ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible DrawingSet within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Delete Individual DrawingSet Record",
        "description": "Returns the result of deletion",
        "operationId": "DrawingSet_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingSetId",
            "in": "path",
            "description": "DrawingSet ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested DrawingSet is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets/{drawingSetId}/uploadDrawing": {
      "post": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Upload Drawing File in specified DrawingSet",
        "description": "Returns the Drawing Set records with uploaded Drawing File Information within the specified Portfolio and Project.",
        "operationId": "DrawingSet_UploadDrawing",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingSetId",
            "in": "path",
            "description": "Drawing Set ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "string": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the Drawing Set records with uploaded Drawing File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets/{drawingSetId}/publish": {
      "post": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Publish Approved Drawings in the given DrawingSet",
        "description": "Returns the published Drawing Set",
        "operationId": "DrawingSet_Publish",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "drawingSetId",
            "in": "path",
            "description": "The DrawingSetID of the record to publish",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "waitForCompletion",
            "in": "query",
            "description": "Optional parameter; set to true if the caller will wait for the publishing to complete. When this is not true, the caller must monitor the WorkflowState of the Drawings that are being published and wait for a change to a WorkflowState other than Processing",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified DrawingSet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawingSet"
                }
              }
            }
          },
          "401": {
            "description": "User does not have access"
          },
          "403": {
            "description": "User does not have the required permission"
          },
          "500": {
            "description": "User does not have any portfolio"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/drawingsets/workflowstates": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get WorkflowStates for DrawingSet Record",
        "description": "Returns the list of Workflow Statuses for DrawingSet within the specified Portfolio and Project.",
        "operationId": "DrawingSet_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawingsets/reports": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get list of all available reports for DrawingSet",
        "description": "Returns the list of user accessible Reports for DrawingSet",
        "operationId": "DrawingSet_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/drawingsets/udfs": {
      "get": {
        "tags": [
          "DrawingSet"
        ],
        "summary": "Get list of all available UDFs for DrawingSet",
        "description": "Returns the list of UDFs for DrawingSet",
        "operationId": "DrawingSet_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpCompanies": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Companies for the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetCompanies",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id to retrieve records for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCompany"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCompany"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpCompanies": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Companies for the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetCompaniesForAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve records for",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCompany"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCompany"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpCompanies/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Company for the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetCompany",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The account id to retrieve the record from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCompany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCompany"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpCompanies/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Company for the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetCompanyInAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve the record from",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCompany"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCompany"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpProjects": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Projects for the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetProjects",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id to retrieve records for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPProject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpProjects": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Projects for the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetProjectsForAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve records for",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPProject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPProject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpProjects/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Project for the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetProject",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id to retrieve the record from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPProject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpProjects/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Project for the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetProjectInAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve the record from",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPProject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPProject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpCustomersAndVendors": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Customer and Vendors for the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetCustomersAndVendors",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id to retrieve records for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCustomerOrVendor"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCustomerOrVendor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpCustomersAndVendors": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves the list of ERP Customer and Vendors for the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetCustomersAndVendorsForAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve records for",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the set of records that were found for the workspaceId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCustomerOrVendor"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ERPCustomerOrVendor"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{workspaceId}/erpCustomersAndVendors/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Customer or Vendor in the specified workspace from the ERP cache",
        "operationId": "ERPReadOnly_GetCustomerOrVendor",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The workspace id to retrieve the record from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCustomerOrVendor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCustomerOrVendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{accountId}/erpCustomersAndVendors/{id}": {
      "get": {
        "tags": [
          "ERPReadOnly"
        ],
        "summary": "Retrieves one ERP Customer or Vendor in the specified account from the ERP cache",
        "operationId": "ERPReadOnly_GetCustomerOrVendorInAccount",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The account id to retrieve the record from",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The primary key of the record to retrieve",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the record that was found with the specified id, if any.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCustomerOrVendor"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ERPCustomerOrVendor"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/fieldworkdirectives/{fieldWorkDirectiveId}": {
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get Individual FieldWorkDirective Record",
        "description": "Returns the specified Field Work Directive that the user has access to within the specified portfolio and project",
        "operationId": "FieldWorkDirective_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldWorkDirectiveId",
            "in": "path",
            "description": "FieldWorkDirective ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible FieldWorkDirective within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWorkDirective"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWorkDirective"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Delete Individual FieldWorkDirective Record",
        "description": "Returns the result of deletion",
        "operationId": "FieldWorkDirective_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fieldWorkDirectiveId",
            "in": "path",
            "description": "FieldWorkDirective ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested FieldWorkDirective is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/fieldworkdirectives": {
      "post": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Creates/Updates Individual FieldWorkDirective",
        "description": "Returns the created/updated Field Work Directive given by the user",
        "operationId": "FieldWorkDirective_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FieldWorkDirective"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldWorkDirective"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldWorkDirective"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FieldWorkDirective"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible FieldWorkDirective within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWorkDirective"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldWorkDirective"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get Collection of FieldWorkDirective records, including all children.",
        "description": "Returns the list of user accessible Field Work Directive records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "FieldWorkDirective_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Field Work Directive records for the given offset andlimit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/fieldworkdirectives/query": {
      "post": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get Collection of FieldWorkDirective records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Field Work Directive records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "FieldWorkDirective_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Field Work Directive records for the specified request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/fieldworkdirectives/list": {
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get Collection of FieldWorkDirective records, not including their children.",
        "description": "Returns the list of user accessible Field Work Directive records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "FieldWorkDirective_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Field Work Directive records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/fieldworkdirectives/list": {
      "post": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get Collection of FieldWorkDirective records, not including their children.",
        "description": "Returns the list of user accessible Field Work Directive records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "FieldWorkDirective_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Field Work Directive records for the specified request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldWorkDirective"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/fieldworkdirectives/workflowstates": {
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get WorkflowStates for FieldWorkDirective Record",
        "description": "Returns the list of Workflow Statuses for FieldWorkDirective within the specified Portfolio and Project.",
        "operationId": "FieldWorkDirective_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime-Optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/fieldworkdirectives/reports": {
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get list of all available reports for FieldWorkDirective",
        "description": "Returns the list of user accessible Reports for FieldWorkDirective",
        "operationId": "FieldWorkDirective_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/fieldworkdirectives/udfs": {
      "get": {
        "tags": [
          "FieldWorkDirective"
        ],
        "summary": "Get list of all available UDFs for FieldWorkDirective",
        "description": "Returns the list of UDFs for FieldWorkDirective",
        "operationId": "FieldWorkDirective_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/{fileId}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get Individual File",
        "description": "Returns the specified File that the user has access to within the specified portfolio and project",
        "operationId": "File_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "FileId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible File within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete the File",
        "description": "Returns the result of deletion",
        "operationId": "File_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "FileID to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested File is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Provided input is not valid"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/{fileId}/content": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Download File",
        "description": "Returns the File Content that the user has access to within the specified portfolio and project",
        "operationId": "File_Content",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "File ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible File Content within the specified Portfolio and Project."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get Collection of Files",
        "description": "Returns the Collection of Files under the specified Folder ID that the user has access to within the specified portfolio and project",
        "operationId": "File_GetFiles",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested list of user accessible Files within the specified folder based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Update Individual file metadata",
        "description": "Returns the result of updated record",
        "operationId": "File_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the detail about the updated File",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/uploadFile": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Upload File",
        "description": "Returns the uploaded File information within the specified Portfolio and Project.",
        "operationId": "File_UploadFile",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "string": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the uploaded File information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/requestLinks": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Retrieve a collection of pre-signed urls for uploading files",
        "operationId": "File_RequestLinks",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The portfolio primary key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project primary key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The number of links that have been requested. Min 1 and Max 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested list of pre-signed URLs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/externalUpload": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Initiate the asynchronous upload of an external file",
        "description": "This method is used to initiate the import of a file that has been uploaded to an external location using a pre-signed link from the requestLinks endpoint.\r\nIf the initiation is successful, an AcceptedResponse will be returned that contains an id.\r\nThis id can be used to get the status and, when successful, FileID of the uploaded file using a GET on the externalUpload endpoint.\r\nOnce the status query indicates that the file is no longer in progress, the id can be used to post a DELETE request to externalUpload, indicating that the information is no longer needed by the caller.",
        "operationId": "File_InitiateUploadRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The portfolio primary key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project primary key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing information on the file to be uploaded",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "202": {
            "description": "Returns the request identifier that can be used to retrieve the upload status (the Href in the response can be used to GET this status)."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/files/externalUpload/{id}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Gets the status of the externalUpload",
        "operationId": "File_GetUploadStatus",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The portfolio primary key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project primary key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "removeRequestWhenComplete",
            "in": "query",
            "description": "When true, the default, the request will be automatically removed when it has been completed. This eliminates the need to call the DELETE endpoint to remove the request.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file id of the uploaded file.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "202": {
            "description": "The file is still being uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "An error occurred during the upload of the file. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "410": {
            "description": "The file upload request has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete the upload request",
        "operationId": "File_DeleteUploadRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The portfolio primary key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The project primary key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/folders": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Read the root folder",
        "description": "Returns the root folder for the specified project",
        "operationId": "Folder_GetRootFolder",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible root Folder for the specified Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request, Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error, Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folder"
        ],
        "summary": "Create/Update Individual Folder",
        "description": "Returns the created/updated Folder given by user",
        "operationId": "Folder_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Folder which need to be created/updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated user accessible Folder within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request, Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error, Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/folders/{folderId}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Read the specified folder or a list of its first level children",
        "description": "Returns either the specified Folder (if onlyThisFolder is set to true) or the collection of child Folders under the specified folder.\r\nThe returned set of folders is restricted to those the requesting user has access to.",
        "operationId": "Folder_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "FolderId to retrieve the list of its child folders if any.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyThisFolder",
            "in": "query",
            "description": "An optional parameter to indicate that only information on the specified folder is to be returned rather than a list of its children.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible Folder within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request, Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error, Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folder"
        ],
        "summary": "Delete the individual Folder",
        "description": "Returns the result of deletion",
        "operationId": "Folder_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Id",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "folderId",
            "in": "path",
            "description": "FolderID to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested Folder is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request, Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error, Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "The request could not be processed by the server due to invalid syntax."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/folders/byPath": {
      "post": {
        "tags": [
          "Folder"
        ],
        "summary": "Read the specified folder by path",
        "description": "Returns the specified Folder by path.\r\nThe returned folder is restricted to those the requesting user has access to.",
        "operationId": "Folder_GetByPath",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The Portfolio primary key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The Project primary key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The path to the folder to retrieve. This should not include the root folder (i.e. ProjectSight Documents). It should be in standard path form (i.e. Checklist Documents\\001).",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested user accessible Folder within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request, Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error, Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/forecasts/{forecastId}": {
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get Individual Forecast Record",
        "description": "Returns the requested Forecast that the user has access to within the specified portfolio and project.",
        "operationId": "Forecast_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forecastId",
            "in": "path",
            "description": "Forecast ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Forecast that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecast"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecast"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Forecast"
        ],
        "summary": "Delete Individual Forecast Record",
        "description": "Returns the result of deletion",
        "operationId": "Forecast_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forecastId",
            "in": "path",
            "description": "Forecast ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Forecast is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/forecasts": {
      "post": {
        "tags": [
          "Forecast"
        ],
        "summary": "Creates/Updates Individual Forecast. This will also perform recalculation for existing records.",
        "description": "Returns the created/updated Forecast information that the user has access to within the specified portfolio and project.",
        "operationId": "Forecast_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Forecast"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Forecast"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Forecast"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Forecast"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Forecast information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecast"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forecast"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get Collection of Forecast records, including all children.",
        "description": "Returns the list of user accessible Forecast information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Forecast_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Forecast information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/forecasts/query": {
      "post": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get Collection of Forecast records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Forecast information for the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Forecast_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Forecast information for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/forecasts/list": {
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get Collection of Forecast records, not including their children.",
        "description": "Returns the list of user accessible Forecast information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Forecast_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Forecast information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/forecasts/list": {
      "post": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get Collection of Forecast records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Forecast information for the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Forecast_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Forecast information for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Forecast"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/forecasts/workflowstates": {
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get WorkflowStates for Forecast Record",
        "description": "Returns the list of Workflow Statuses for Forecast within the specified Portfolio and Project.",
        "operationId": "Forecast_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime - Optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/forecasts/reports": {
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get list of all available reports for Forecast",
        "description": "Returns the list of user accessible Reports for Forecast",
        "operationId": "Forecast_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/forecasts/udfs": {
      "get": {
        "tags": [
          "Forecast"
        ],
        "summary": "Get list of all available UDFs for Forecast",
        "description": "Returns the list of UDFs for Forecast",
        "operationId": "Forecast_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/generalInvoices/{genInvId}": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get Individual GeneralInvoice Record",
        "description": "Returns the requested General Invoice that the user has access to within the specified portfolio and project.",
        "operationId": "GeneralInvoice_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genInvId",
            "in": "path",
            "description": "GeneralInvoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested GeneralInvoice that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Delete Individual GeneralInvoice Record",
        "description": "Returns the result of deletion",
        "operationId": "GeneralInvoice_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genInvId",
            "in": "path",
            "description": "GeneralInvoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested GeneralInvoice is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/generalInvoices": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get Collection of GeneralInvoice records, including all children.",
        "description": "Returns the list of user accessible General Invoice records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "GeneralInvoice_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible General Invoice records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Adds the specified PurchaseOrder to a GeneralInvoice and saves",
        "description": "Adds a Purchase Order to a General Invoice and returns the updated General Invoice.",
        "operationId": "GeneralInvoice_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralInvoice"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralInvoice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralInvoice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated General Invoice record that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/generalInvoices/query": {
      "post": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get Collection of GeneralInvoice records, including all children, based on a query request.",
        "description": "Returns the list of user accessible General Invoice records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "GeneralInvoice_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible General Invoice records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/generalInvoices/list": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get Collection of GeneralInvoice records, not including their children.",
        "description": "Returns the list of user accessible General Invoice records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "GeneralInvoice_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible General Invoice records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/generalInvoices/list": {
      "post": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get Collection of GeneralInvoice records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible General Invoice records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "GeneralInvoice_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible General Invoice records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralInvoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/generalInvoices/{genInvId}/addPurchaseOrder/{poId}": {
      "post": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Creates/Updates Individual GeneralInvoice",
        "description": "Returns the created/updated General Invoice record that the user has access to within the specified portfolio and project.",
        "operationId": "GeneralInvoice_AddPurchaseOrderToGeneralInvoice",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genInvId",
            "in": "path",
            "description": "GeneralInvoice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "PurchaseOrder ID. If the General Invoice is already linked to this Purchase Order and there are no items in the General Invoice, the items without a balance, if any, will be reloaded from the Purchase Order",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "okToOverwriteExistingItems",
            "in": "query",
            "description": "Set to true if it is ok to remove all existing items from the GI before merging from the PO",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the updated General Invoice records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralInvoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/generalInvoices/workflowstates": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get WorkflowStates for GeneralInvoice Record",
        "description": "Returns the list of Workflow Statuses for GeneralInvoice within the specified Portfolio and Project.",
        "operationId": "GeneralInvoice_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/generalInvoices/reports": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get list of all available reports for GeneralInvoice",
        "description": "Returns the list of user accessible Reports for GeneralInvoice",
        "operationId": "GeneralInvoice_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/generalInvoices/udfs": {
      "get": {
        "tags": [
          "GeneralInvoice"
        ],
        "summary": "Get list of all available UDFs for GeneralInvoice",
        "description": "Returns the list of UDFs for GeneralInvoice",
        "operationId": "GeneralInvoice_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/issues/{issueId}": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get Individual Issue Record",
        "description": "Returns the specified Issue that the user has access to within the specified portfolio and project",
        "operationId": "Issue_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Issue within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Issue"
        ],
        "summary": "Delete the Individual Issue Record",
        "description": "Returns the result of deletion",
        "operationId": "Issue_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "issueId",
            "in": "path",
            "description": "Issue ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested Issue has been deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/issues": {
      "post": {
        "tags": [
          "Issue"
        ],
        "summary": "Creates/Updates Individual Issue",
        "description": "Returns the created/updated Issue given by the user",
        "operationId": "Issue_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Issue"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible Issue within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Issue"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get Collection of Issue records, including all children.",
        "description": "Returns the list of user accessible Issue records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Issue_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your  administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Issue records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/issues/query": {
      "post": {
        "tags": [
          "Issue"
        ],
        "summary": "Get Collection of Issue records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Issue records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Issue_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your  administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Issue records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/issues/list": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get Collection of Issue records, not including their children.",
        "description": "Returns the list of user accessible Issue records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Issue_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your  administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Issue records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/issues/list": {
      "post": {
        "tags": [
          "Issue"
        ],
        "summary": "Get Collection of Issue records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Issue records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Issue_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your  administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Issue records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Issue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/issues/workflowstates": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get WorkflowStates for Issue Record",
        "description": "Returns the list of Workflow Statuses for Issue within the specified Portfolio and Project.",
        "operationId": "Issue_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/issues/reports": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get list of all available reports for Issue",
        "description": "Returns the list of user accessible Reports for Issue",
        "operationId": "Issue_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/issues/udfs": {
      "get": {
        "tags": [
          "Issue"
        ],
        "summary": "Get list of all available UDFs for Issue",
        "description": "Returns the list of UDFs for Issue",
        "operationId": "Issue_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/jobCosts/{jobCostId}": {
      "get": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Get Individual JobCosts Record",
        "description": "Returns the requested JobCosts that the user has access to within the specified portfolio and project.",
        "operationId": "JobCosts_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobCostId",
            "in": "path",
            "description": "Job Costs Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested JobCosts that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Delete single JobCosts Record",
        "description": "Returns the result of deletion",
        "operationId": "JobCosts_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "jobCostId",
            "in": "path",
            "description": "Job Costs Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested JobCosts is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/jobCosts": {
      "post": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Creates/Updates one record",
        "description": "Returns the created/updated JobCosts record that the user has access to within the specified portfolio and project.",
        "operationId": "JobCosts_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JobCosts"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCosts"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/JobCosts"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/JobCosts"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated JobCosts information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Get Collection of JobCosts records, including all children.",
        "description": "Returns the list of user accessible JobCosts records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "JobCosts_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible JobCosts records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/jobCosts/bulk": {
      "post": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Creates/Updates multiple records",
        "description": "Returns the created/updated JobCosts records that the user has access to within the specified portfolio and project",
        "operationId": "JobCosts_PostBulk",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of records",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated JobCosts records along with the status of the request and the error code and message in the event of a failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCostsBulkUpsertResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCostsBulkUpsertResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Delete multiple JobCosts Records",
        "description": "Returns the result of deletion",
        "operationId": "JobCosts_DeleteBulk",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of job cost ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "For each primary key in the original list, returns the primary key, success or failure, and the error code and message when an error code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkDeleteResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkDeleteResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/jobCosts/bulkOriginId": {
      "post": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Creates/Updates multiple records using originId to locate existing records, both JobCosts and JobCostItems, to update",
        "description": "Use of this endpoint indicates that the integrator is using OriginId as the unique key for JobCosts records in a project\r\nand OriginId as the unique key for JobCostItems records in a JobCosts record.\r\n            \r\nIf a record, JobCost or JobCostItem, is sent without an originId, the request will be rejected with a 403.\r\n            \r\nIf more than one JobCost record shares the same originId, the request will be rejected with a 403.\r\n            \r\nIf more than one JobCostItem record shares the same originId within a JobCost record, the request will be rejected with a 403.\r\n            \r\nReturns the created/updated JobCosts records that the user has access to within the specified portfolio and project",
        "operationId": "JobCosts_PostBulkOriginId",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of records",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobCosts"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated JobCosts records along with the status of the request and the error code and message in the event of a failure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCostsBulkUpsertResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCostsBulkUpsertResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Deletes multiple records using originId to locate existing records to delete",
        "description": "Use of this endpoint indicates that the integrator is using OriginId as the unique key for JobCosts records in a project\r\n            \r\nReturns the result of deletion",
        "operationId": "JobCosts_DeleteBulkOriginId",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "List of job cost origin ids",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "For each primary key in the original list, returns the primary key, success or failure, and the error code and message when an error code",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkDeleteResponse"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkDeleteResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/jobCosts/query": {
      "post": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Get Collection of JobCosts records, including all children, based on a query request.",
        "description": "Returns the list of user accessible JobCosts records for the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "JobCosts_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible JobCosts records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/jobCosts/list": {
      "get": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Get Collection of JobCosts records, not including their children.",
        "description": "Returns the list of user accessible JobCostss for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "JobCosts_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project Primary Key",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible JobCosts records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/jobCosts/list": {
      "post": {
        "tags": [
          "JobCosts"
        ],
        "summary": "Get Collection of JobCosts records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible JobCosts records for the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "JobCosts_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio Primary Key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible JobCosts records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobCosts"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get LookupListTypes For Individual Project.",
        "description": "Returns the user accessible list of Lookup List Types within the specified Portfolio and Project.",
        "operationId": "LookupList_Get",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible LookupList Types within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/{sectionId}": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get LookupListItems For Individual LookupListType",
        "description": "Returns the user accessible list of Lookup List Items for the specified Lookup List Type within the specified Portfolio and Project.",
        "operationId": "LookupList_GetBySectionID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "Section ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Optional last Sync DateTime. If this is specified, offset and limit will be ignored.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Optional number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible LookupListItems for the specified LookupListType within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListItem"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LookupList"
        ],
        "summary": "Add or update a LookupListItem",
        "description": "This endpoint may not be used to update lookup list entries that have their own endpoints within this controller (i.e. Revenue Codes, Contract Types, etc).",
        "operationId": "LookupList_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "Lookup list type identifier",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "LookupListItem Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItem"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItem"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItem"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created LookupListItem for the specified LookupListType within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupListItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupListItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/{sectionId}/{lookupListId}": {
      "delete": {
        "tags": [
          "LookupList"
        ],
        "summary": "Deletes a LookupListItem from the specified LookupList",
        "description": "This endpoint may not be used to update lookup list entries that have their own endpoints within this controller (i.e. Contract Types, etc).\r\nHowever, it may be used to delete Revenue Code, UOM, and Equipment lookup types",
        "operationId": "LookupList_DeleteLookupList",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. This is primarily used to verify security and can be 0.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sectionId",
            "in": "path",
            "description": "Lookup list type identifier",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupListId",
            "in": "path",
            "description": "The primary key for the LookupListItem that is to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the LookupListItem was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/locations": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get Locations For Individual Project.",
        "description": "Returns user accessible list of Locations within the specified Portfolio and Project.",
        "operationId": "LookupList_GetLocations",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Optional last Sync DateTime. If this is specified, offset and limit will be ignored.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Optional number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Locations within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/punchlisttypicalconditions": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get Collection of PunchlistTypicalConditions for Project.",
        "description": "Returns user accessible list of Punchlist Typical Conditions within the specified Portfolio and Project.",
        "operationId": "LookupList_GetPunchListTypicalConditions",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Optional last Sync DateTime. If this is specified, offset and limit will be ignored.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Optional number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible PunchlistTypicalConditions within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchListTypicalCondition"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchListTypicalCondition"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details."
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/csicodes": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get Collection of CSICodes for Project.",
        "description": "Returns user accessible list of CSI Codes (aka Spec Sections) within the specified Portfolio and Project.",
        "operationId": "LookupList_GetCSICodes",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Optional last Sync DateTime. If this is specified, offset and limit will be ignored.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Optional number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible CSICodes within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSICode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSICode"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access"
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details."
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/contracttypes": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get ContractTypes For Individual Project.",
        "description": "Returns user accessible list of Contract Types within the specified Portfolio and Project.",
        "operationId": "LookupList_GetContractTypes",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible contract types within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractType"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/periods": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get Periods For Individual Project.",
        "description": "Returns user accessible list of Cost Periods within the specified Portfolio and Project.",
        "operationId": "LookupList_GetPeriods",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Optional last Sync DateTime. If this is specified, offset and limit will be ignored.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Optional number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Optional number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Periods within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeriodRecord"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeriodRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/revenuecodes": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get the revenue codes for the specified project",
        "description": "Returns the list of Revenue Codes for the specified project.\r\nIf the Revenue Codes have not been unlocked for the project, the portfolio Revenue Codes will be returned",
        "operationId": "LookupList_GetRevenueCodes",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Primary key for the portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Primary key for the project",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Revenue Codes within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RevenueCode"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RevenueCode"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LookupList"
        ],
        "summary": "Adds or updates a Revenue Code",
        "description": "Returns the new or updated Revenue Code including the primary key.",
        "operationId": "LookupList_AddOrUpdateRevenueCode",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. If this value is non-zero, the request is to create a new Revenue Code, and the Revenue Codes have not been unlocked for the project, this will cause the records to be unlocked before this entry is created.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The Revenue Code",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RevenueCode"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevenueCode"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RevenueCode"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RevenueCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created or updated RevenueCode in the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevenueCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevenueCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/revenuecodes/{lookupListId}": {
      "delete": {
        "tags": [
          "LookupList"
        ],
        "summary": "Deletes a RevenueCode",
        "operationId": "LookupList_DeleteRevenueCode",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. This is primarily used to verify security and can be 0.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupListId",
            "in": "path",
            "description": "The primary key for the RevenueCode that is to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the RevenueCode was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/equipment": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get the Equipment lookup list items",
        "description": "Returns the list of Equipment lookup list entries for the specified project.\r\nIf the Equipment lookup list not been unlocked for the project, the portfolio items will be returned",
        "operationId": "LookupList_GetEquipment",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Primary key for the portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Primary key for the project",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Equipment lookup list items for the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListItemEquipment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookupListItemEquipment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LookupList"
        ],
        "summary": "Adds or updates an Equipment lookup list item",
        "description": "Returns the new or updated Equipment lookup list item including the primary key.",
        "operationId": "LookupList_AddOrUpdateEquipment",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. If this value is non-zero, the request is to create a new Equipment lookup list item, and the Equipment lookup list has not been unlocked for the project, this will cause the records to be unlocked before this entry is created.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The Equipment lookup list item",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItemEquipment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItemEquipment"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItemEquipment"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LookupListItemEquipment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created or updated Equipment lookup list item in the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupListItemEquipment"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupListItemEquipment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/equipment/{lookupListId}": {
      "delete": {
        "tags": [
          "LookupList"
        ],
        "summary": "Deletes an Equipment lookup list item",
        "operationId": "LookupList_DeleteEquipment",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. This is primarily used to verify security and can be 0.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupListId",
            "in": "path",
            "description": "The primary key for the Equipment lookup list item that is to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the Equipment lookup list item was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/unitsofmeasure": {
      "get": {
        "tags": [
          "LookupList"
        ],
        "summary": "Get the Units of Measure for the specified project",
        "description": "Returns the list of Units of Measure for the specified project.\r\nIf the Units of Measure have not been unlocked for the project, the portfolio Units of Measure will be returned",
        "operationId": "LookupList_GetUnitOfMeasures",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Primary key for the portfolio",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Primary key for the project",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Units of Measure within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitOfMeasure"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UnitOfMeasure"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LookupList"
        ],
        "summary": "Adds or updates a Unit of Measure",
        "description": "Returns the new or updated Unit of Measure including the primary key.",
        "operationId": "LookupList_AddOrUpdateUnitOfMeasure",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. If this value is non-zero, the request is to create a new Unit of Measure, and the Units of Measure have not been unlocked for the project, this will cause the records to be unlocked before this entry is created.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The Unit of Measure",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasure"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created or updated UnitOfMeasure in the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasure"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasure"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/lookuplists/unitsofmeasure/{lookupListId}": {
      "delete": {
        "tags": [
          "LookupList"
        ],
        "summary": "Deletes a UnitOfMeasure",
        "operationId": "LookupList_DeleteUnitOfMeasure",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID. This is primarily used to verify security and can be 0.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lookupListId",
            "in": "path",
            "description": "The primary key for the UnitOfMeasure that is to be deleted",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the UnitOfMeasure was deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/meetings/{meetingId}": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get Individual Meeting Record",
        "description": "Returns the requested Meeting that the user has access to within the specified portfolio and project.",
        "operationId": "Meeting_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meetingId",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Meeting that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Meeting"
        ],
        "summary": "Delete Individual Meeting Record",
        "description": "Returns the result of deletion",
        "operationId": "Meeting_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "meetingId",
            "in": "path",
            "description": "Meeting ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Meeting is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/meetings": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get Collection of Meeting records, including all children.",
        "description": "Returns the list of user accessible Meetings for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Meeting_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Meeting records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Meeting"
        ],
        "summary": "Creates/Updates Individual Meeting",
        "description": "Returns the created/updated Meeting that the user has access to within the specified portfolio and project.",
        "operationId": "Meeting_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Meeting"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Meeting"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Meeting"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Meeting"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Meeting records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meeting"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/meetings/query": {
      "post": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get Collection of Meeting records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Meeting records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Meeting_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Meeting records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/meetings/list": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get Collection of Meeting records, not including their children.",
        "description": "Returns the list of user accessible Meetings for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Meeting_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Meeting records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/meetings/list": {
      "post": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get Collection of Meeting records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Meeting records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Meeting_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Meeting records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Meeting"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/meetings/workflowstates": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get WorkflowStates for Meeting Record",
        "description": "Returns the list of Workflow Statuses for Meeting within the specified Portfolio and Project.",
        "operationId": "Meeting_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forItems",
            "in": "query",
            "description": "When true, the workflow states for the meeting items will be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/meetings/reports": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get list of all available reports for Meeting",
        "description": "Returns the list of user accessible Reports for Meeting",
        "operationId": "Meeting_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/meetings/udfs": {
      "get": {
        "tags": [
          "Meeting"
        ],
        "summary": "Get list of all available UDFs for Meeting",
        "description": "Returns the list of UDFs for Meeting",
        "operationId": "Meeting_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/notices/{noticeId}": {
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get Individual Notice Record",
        "description": "Returns the requested user accessible Notice within the specified Portfolio and Project.",
        "operationId": "Notice_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noticeId",
            "in": "path",
            "description": "Notice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Notice within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Notice"
        ],
        "summary": "Delete Individual Notice Record",
        "description": "Returns the result of deletion",
        "operationId": "Notice_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noticeId",
            "in": "path",
            "description": "Notice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Notice is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Provided input is not valid"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/notices": {
      "post": {
        "tags": [
          "Notice"
        ],
        "summary": "Creates/Updates Individual Notice",
        "description": "Returns the created/updated user accessible Notice within the specified Portfolio and Project.",
        "operationId": "Notice_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Notice"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Notice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Notice"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible Notice within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notice"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get Collection of Notice records, including all children.",
        "description": "Returns the list of user accessible Notice information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Notice_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Notice information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/notices/query": {
      "post": {
        "tags": [
          "Notice"
        ],
        "summary": "Get Collection of Notice records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Notice information for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Notice_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Notice information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/notices/list": {
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get Collection of Notice records, not including their children.",
        "description": "Returns the list of user accessible Notice information for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Notice_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of items to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Notice information for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/notices/list": {
      "post": {
        "tags": [
          "Notice"
        ],
        "summary": "Get Collection of Notice records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Notice information for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Notice_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the list of user accessible Notice information for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/notices/workflowstates": {
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get WorkflowStates for Notice Record",
        "description": "Returns the list of Workflow Statuses for Notice within the specified Portfolio and Project.",
        "operationId": "Notice_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/notices/reports": {
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get list of all available reports for Notice",
        "description": "Returns the list of user accessible Reports for Notice",
        "operationId": "Notice_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/notices/udfs": {
      "get": {
        "tags": [
          "Notice"
        ],
        "summary": "Get list of all available UDFs for Notice",
        "description": "Returns the list of UDFs for Notice",
        "operationId": "Notice_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/photos/{photoId}/content": {
      "get": {
        "tags": [
          "Photo"
        ],
        "summary": "Download Photo",
        "description": "Returns the Photo Content that the user has access to within the specified portfolio and project",
        "operationId": "Photo_Content",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "photoId",
            "in": "path",
            "description": "Photo ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Photo Content within the specified Portfolio and Project."
          }
        }
      }
    },
    "/{portfolioGuid}/poCatalog/{poId}": {
      "get": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Get Individual POCatalog Record",
        "description": "Returns the requested Purchase Order Catalog that the user has access to within the specified portfolio.",
        "operationId": "POCatalog_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "POCatalog ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested POCatalog that the user has access to within the specified portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POCatalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/POCatalog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Delete Individual POCatalog Record",
        "description": "Returns the result of deletion",
        "operationId": "POCatalog_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "POCatalog ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested POCatalog is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/poCatalog": {
      "get": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Get Collection of POCatalog records.",
        "description": "Returns the list of user accessible Purchase Order Catalog records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "POCatalog_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order Catalog records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Creates/Updates Individual POCatalog",
        "description": "Returns the created/updated Purchase Order Catalog records that the user has access to within the specified portfolio.",
        "operationId": "POCatalog_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/POCatalog"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/POCatalog"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/POCatalog"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/POCatalog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Purchase Order Catalog records that the user has access to within the specified portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POCatalog"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/POCatalog"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/poCatalog/query": {
      "post": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Get Collection of POCatalog records based on a query request",
        "description": "Returns the list of user accessible Purchase Order Catalog records for the given request.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "POCatalog_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order Catalog records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/poCatalog/list": {
      "get": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Get Collection of POCatalog records.",
        "description": "Returns the list of user accessible Purchase Order Catalog records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "POCatalog_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order Catalog records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "POCatalog"
        ],
        "summary": "Get Collection of POCatalog records based on a query request.",
        "description": "Returns the list of user accessible Purchase Order Catalog records for the given request.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "POCatalog_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order Catalog records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POCatalog"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/portfolios": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Portfolios",
        "description": "Returns the complete list of user accessible Portfolios.",
        "operationId": "Portfolio_GetPortfolios",
        "parameters": [
          {
            "name": "includeOffline",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the current user's list of Portfolio information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Portfolio"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Portfolio"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Creates/Updates Portfolio",
        "description": "Returns the created/updated Portfolio information.",
        "operationId": "Portfolio_Post",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Portfolio information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/portfolios/createFromRequest": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Creates new Portfolio from a request",
        "description": "Returns information on the new Portfolio.",
        "operationId": "Portfolio_CreateFromRequest",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new Portfolio information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/portfolios/copyFromTemplate": {
      "post": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Creates a new Portfolio by copying from a template Portfolio",
        "description": "Returns information on the new Portfolio.",
        "operationId": "Portfolio_CopyFromTemplate",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCopyFromTemplateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCopyFromTemplateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCopyFromTemplateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioCopyFromTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the new Portfolio information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/portfolios/{portfolioGuid}": {
      "get": {
        "tags": [
          "Portfolio"
        ],
        "summary": "Get Individual Portfolio",
        "description": "Returns the requested portfolio information",
        "operationId": "Portfolio_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested portfolio information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/potentialCOs/{potentialCOid}": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get Individual PotentialCO Record",
        "description": "Returns the requested Potential Change Order that the user has access to within the specified portfolio and project.",
        "operationId": "PotentialCO_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "potentialCOid",
            "in": "path",
            "description": "PotentialCO ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested PotentialCO that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/PotentialCOs": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get Collection of PotentialCO records, including all children.",
        "description": "Returns the list of user accessible Potential Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PotentialCO_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Potential Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Creates/Updates Individual PotentialCO",
        "description": "Returns the created/updated Potential Change Order record that the user has access to within the specified portfolio and project.",
        "operationId": "PotentialCO_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PotentialCO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PotentialCO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PotentialCO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PotentialCO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Potential Change Order record that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PotentialCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/PotentialCOs/query": {
      "post": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get Collection of PotentialCO records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Potential Change Order records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PotentialCO_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Potential Change Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/PotentialCOs/list": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get Collection of PotentialCO records, not including their children.",
        "description": "Returns the list of user accessible Potential Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PotentialCO_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Potential Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/PotentialCOs/list": {
      "post": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get Collection of PotentialCO records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Potential Change Order records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PotentialCO_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Potential Change Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PotentialCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/PotentialCOs/{PotentialCOId}": {
      "delete": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Delete Individual PotentialCO Record",
        "description": "Returns the result of deletion",
        "operationId": "PotentialCO_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PotentialCOId",
            "in": "path",
            "description": "PotentialCO ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested PotentialCO is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/PotentialCOs/workflowstates": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get WorkflowStates for PotentialCO Record",
        "description": "Returns the list of Workflow Statuses for PotentialCO within the specified Portfolio and Project.",
        "operationId": "PotentialCO_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/PotentialCOs/reports": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get list of all available reports for PotentialCO",
        "description": "Returns the list of user accessible Reports for PotentialCO",
        "operationId": "PotentialCO_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/potentialCOs/udfs": {
      "get": {
        "tags": [
          "PotentialCO"
        ],
        "summary": "Get list of all available UDFs for PotentialCO",
        "description": "Returns the list of UDFs for PotentialCO",
        "operationId": "PotentialCO_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/primeContractCOs/{changeOrderId}": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get Individual PrimeContractCO Record",
        "description": "Returns the requested Prime Contract Change Order that the user has access to within the specified portfolio and project.",
        "operationId": "PrimeContractCO_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changeOrderId",
            "in": "path",
            "description": "Prime Contract Change Order ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested PrimeContractCO that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeContractCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeContractCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Delete Individual PrimeContractCO Record",
        "description": "Returns the result of deletion",
        "operationId": "PrimeContractCO_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changeOrderId",
            "in": "path",
            "description": "Prime Contract Change Order ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested PrimeContractCO is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/primeContractCOs": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get Collection of PrimeContractCO records, including all children.",
        "description": "Returns the list of user accessible Prime Contract Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PrimeContractCO_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Prime Contract Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Creates/Updates Individual PrimeContractCO",
        "description": "Returns the created/updated Prime Contract Change Order records that the user has access to within the specified portfolio and project.",
        "operationId": "PrimeContractCO_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PrimeContractCO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimeContractCO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PrimeContractCO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PrimeContractCO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Prime Contract Change Order records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeContractCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrimeContractCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/primeContractCOs/query": {
      "post": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get Collection of PrimeContractCO records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Prime Contract Change Order records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PrimeContractCO_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Prime Contract Change Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/primeContractCOs/list": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get Collection of PrimeContractCO records, not including their children.",
        "description": "Returns the list of user accessible Prime Contract Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PrimeContractCO_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Prime Contract Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/primeContractCOs/list": {
      "post": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get Collection of PrimeContractCO records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Prime Contract Change Order records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PrimeContractCO_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Prime Contract Change Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimeContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/primeContractCOs/workflowstates": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get WorkflowStates for PrimeContractCO Record",
        "description": "Returns the list of Workflow Statuses for PrimeContractCO within the specified Portfolio and Project.",
        "operationId": "PrimeContractCO_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/primeContractCOs/reports": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get list of all available reports for PrimeContractCO",
        "description": "Returns the list of user accessible Reports for PrimeContractCO",
        "operationId": "PrimeContractCO_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/primeContractCOs/udfs": {
      "get": {
        "tags": [
          "PrimeContractCO"
        ],
        "summary": "Get list of all available UDFs for PrimeContractCO",
        "description": "Returns the list of UDFs for PrimeContractCO",
        "operationId": "PrimeContractCO_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Collection of Projects, including all children.",
        "description": "Returns the complete list of projects the user has access to within the specified portfolio\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Project_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the complete list of user accessible Projects within the requested Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates/Updates Project",
        "description": "Returns the created/updated project information that the user has access to within the specified portfolio.",
        "operationId": "Project_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "licenseForNewTCProject",
            "in": "query",
            "description": "If a new Trimble Connect project is to be created when the requested project is created this parameter will specify the license to be used for the new Trimble Connect Project.\r\nValid values are the Display Name of the license, the Account Id of the license, the license identifier (Guid), or Default.\r\nDefault is only required when the Portfolio that the Project is being created in does not require all new ProjectSight Projects to be linked to a Trimble Connect Project.\r\nIf this is set to a value other than Default, it must be a valid Trimble Connect license accessible to the requesting user.\r\nIf this is not set or set to Default and a new Trimble Connect project is created, the Account associated with the Portfolio the project is being created in must have\r\na Trimble Connect Enterprise License Key set.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "description": "Project",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated project information that the user has access to within the specified portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/list": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Collection of Project record, not including their children.",
        "description": "Returns the list of user accessible Project records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Project_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Project records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get Collection of Project records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Project records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Project_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Project records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/createWithParameters": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates Project using the specified parameters",
        "description": "It is extremely important to note that the API gateway has a timeout of 29 seconds.\r\nIf this request is for creating a project from a template and the template project is using Trimble Connect as the File Library, then it is possible\r\nfor the request to take longer than 29 seconds.\r\n            \r\nBecause of this, it highly recommend that the createRequest endpoint be used instead.",
        "operationId": "Project_CreateProjectWithParameters",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The set of parameters used to specify additional information used when creating the project along with the project information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated project information that the user has access to within the specified portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/createRequest": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Submit a request to initiate the asynchronous creation of a project",
        "description": "This is the first of three API calls that are used to manage the asynchronous creation of a project, especially one that uses a template project which is configured to use\r\nTrimble Connect as its file library.\r\n            \r\nThe other two are the get and delete methods that accept the parameter",
        "operationId": "Project_InitiateProjectCreationRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The set of parameters used to specify additional information used when creating the project along with the project information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "202": {
            "description": "The request was initiated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/createRequest/{id}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete the project creation request",
        "operationId": "Project_DeleteProjectCreateRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves the id of the project that was created as a result of the generation request.",
        "description": "Returns the id of the Project that was generated.\r\nIf the request has not completed yet or has completed with errors, the appropriate response code will be returned.",
        "operationId": "Project_GetProjectCreateRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created project id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "202": {
            "description": "The request is still being processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "An error occurred during the creation of the project. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "410": {
            "description": "The request has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/projects": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Deletes the specified project",
        "description": "Returns the result of deletion",
        "operationId": "Project_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response if the requested project is deleted."
          },
          "401": {
            "description": "Unauthorized Access or Project already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Individual Project",
        "description": "Returns the specified project that the user has access to within the specified portfolio",
        "operationId": "Project_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project projectId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Project information that the user has access to within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/image": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_GetImage",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/projects/image": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get Project Picture from server",
        "description": "Returns the specified project image that the user has access to within the specified portfolio",
        "operationId": "Project_GetPicture",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project projectId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Project picture that the user has access to within the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Post or Update project picture",
        "description": "Project picture is shown in the list of projects and project dashboard",
        "operationId": "Project_UploadProjectImage",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project projectId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns confirmation bool that the project image has been uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      }
    },
    "/{portfolioGuid}/projects/workflowstates": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get WorkflowStates for Project",
        "description": "Returns list of Workflow Statuses for Project within the specified Portfolio.",
        "operationId": "Project_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/reports": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get list of all available reports for Project",
        "description": "Returns the list of user accessible Reports for Project",
        "operationId": "Project_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/udfs": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get list of all available UDFs for Project",
        "description": "Returns the list of UDFs for Project",
        "operationId": "Project_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/projects/{projectId}/users": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Retrieves the complete list of users in the Portfolio.",
        "description": "The ProjectGroupID property indicates which users have access to the project.\r\nThis list can be updated and returned to the corresponding Post request in order to update project membership.",
        "operationId": "Project_GetUsers",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project projectId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of users with information on their project membership.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectUser"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Updates the project access for the specified set of users.",
        "description": "No updates will occur for portfolio administrators.\r\nIf the user's ProjectGroupID is set to 0, the user will be removed from the project.\r\nOtherwise, if the user's ProjectGroupID is set to a valid value, the user will be added to the project.",
        "operationId": "Project_UpdateUsers",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project projectId",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The list of users to update",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectUser"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectUser"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectUser"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of users that failed to update. The ID and ErrorMessage property will be populated and in some cases, the ProjectGroupID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectUser"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/punchlists/{punchListId}": {
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get Individual PunchList Record",
        "description": "Returns the specified Punch List that the user has access to within the specified Portfolio and Project",
        "operationId": "PunchList_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "punchListId",
            "in": "path",
            "description": "PunchList ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible PunchList within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PunchList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PunchList"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PunchList"
        ],
        "summary": "Delete Individual PunchList Record",
        "description": "Returns the result of deletion",
        "operationId": "PunchList_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "punchListId",
            "in": "path",
            "description": "PunchList ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested PunchList is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/punchlists": {
      "post": {
        "tags": [
          "PunchList"
        ],
        "summary": "Creates/Updates Individual PunchList",
        "description": "Returns the created/updated Punch List given by the user",
        "operationId": "PunchList_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PunchList"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PunchList"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PunchList"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PunchList"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible PunchList within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PunchList"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PunchList"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get Collection of PunchList records, including all children.",
        "description": "Returns the list of Punch List records that the user has access to within the specified Portfolio and Project based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PunchList_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Punch List records based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/punchlists/query": {
      "post": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get Collection of PunchList records, including all children, based on a query request.",
        "description": "Returns the list of Punch List records that the user has access to within the specified Portfolio and Project based on the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PunchList_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Punch List records based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/punchlists/list": {
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get Collection of PunchList records, not including their children.",
        "description": "Returns the list of Punch List records that the user has access to within the specified Portfolio and Project based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PunchList_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to skip from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to fetch after the specified offset",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Punch List records based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/punchlists/list": {
      "post": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get Collection of PunchList  based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of Punch List records that the user has access to within the specified Portfolio and Project based on the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PunchList_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Punch List records based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PunchList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/punchlists/workflowstates": {
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get WorkflowStates for PunchList Record",
        "description": "Returns the list of Workflow Statuses for PunchList within the specified Portfolio and Project.",
        "operationId": "PunchList_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/punchlists/reports": {
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get list of all available reports for PunchList",
        "description": "Returns the list of user accessible Reports for PunchList",
        "operationId": "PunchList_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/punchlists/udfs": {
      "get": {
        "tags": [
          "PunchList"
        ],
        "summary": "Get list of all available UDFs for PunchList",
        "description": "Returns the list of UDFs for PunchList",
        "operationId": "PunchList_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/purchaseOrders/{poId}": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Individual PurchaseOrder Record",
        "description": "Returns the requested Purchase Order that the user has access to within the specified portfolio and project.",
        "operationId": "PurchaseOrder_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "PurchaseOrder ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested PurchaseOrder that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Delete Individual PurchaseOrder Record",
        "description": "Returns the result of deletion",
        "operationId": "PurchaseOrder_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "PurchaseOrder ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested PurchaseOrder is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/purchaseOrders": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Collection of PurchaseOrder records, including all children.",
        "description": "Returns the list of user accessible Purchase Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PurchaseOrder_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Creates/Updates Individual PurchaseOrder",
        "description": "Returns the created/updated Purchase Order record that the user has access to within the specified portfolio and project.",
        "operationId": "PurchaseOrder_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Purchase Order records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseOrder"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/purchaseOrders/query": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Collection of PurchaseOrder records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Purchase Order records for the given query.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "PurchaseOrder_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/purchaseOrders/list": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Collection of PurchaseOrder records, not including their children.",
        "description": "Returns the list of user accessible Purchase Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PurchaseOrder_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/purchaseOrders/list": {
      "post": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get Collection of PurchaseOrder records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Purchase Order records for the given query.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "PurchaseOrder_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Purchase Order records for the given query.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchaseOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/purchaseOrders/workflowstates": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get WorkflowStates for PurchaseOrder Record",
        "description": "Returns list of Workflow Statuses for PurchaseOrder within the specified Portfolio and Project.",
        "operationId": "PurchaseOrder_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/purchaseOrders/reports": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get list of all available reports for PurchaseOrder",
        "description": "Returns the list of user accessible Reports for PurchaseOrder",
        "operationId": "PurchaseOrder_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/purchaseOrders/udfs": {
      "get": {
        "tags": [
          "PurchaseOrder"
        ],
        "summary": "Get list of all available UDFs for PurchaseOrder",
        "description": "Returns the list of UDFs for PurchaseOrder",
        "operationId": "PurchaseOrder_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/records/changes": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get information on all records that have been modified since a specific timestamp",
        "description": "Returns list of record modification information. This information consists of the minimum amount of data required to request the full record through subsequent API calls.\r\nThis request will return a maximum of 2,000 records.\r\nThe latest LastModified timestamp in the returned records can be used to retrieve the next batch of records. Note that this is not guaranteed to be in the last record that is returned since the last update could be to a record that was encountered earlier in the time frame.\r\nIt is possible that some duplication may occur in the next call if multiple records were modified at the same time and these records were the last in the current batch and first in the next batch, for example.\r\nRecords in all projects will be returned, whether or not the requesting user has access to that project. A flag in the record indicates whether or not the record is accessible to the caller.\r\nRecord type security is not applied to the returned data. A flag in the record indicates whether or not the user can access the record type in the record's project.\r\nRecord security is not applied to the returned data. For example, records in Draft mode may be returned, but these would only be accessible in subsequent calls to the appropriate API\r\nendpoints if the caller is the one that created the record (standard record security).",
        "operationId": "Records_GetRecordChanges",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The primary key of the portfolio to retrieve the information from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The timestamp to start returning records from. This is required to be a UTC date in universal sortable format, yyyy-MM-dd HH:mm:ssZ. A value of all 0s will start returning information from the Portfolio's creation.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record details within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordInformation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecordInformation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/records/assignments": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get information on all open assignments for a user in all Portfolios the user has access to",
        "description": "Returns list of open assignments across all Portfolios and Projects the user has access to",
        "operationId": "Records_GetOpenAssignmentsForAllPortfolios",
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record details in all Portfolios.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/records/assignments": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get information on all open assignments for a user in a specific Portfolio",
        "description": "Returns list of open assignments in all Projects the user has access to within the specified Portfolio",
        "operationId": "Records_GetOpenAssignmentsForOnePortfolio",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The primary key of the portfolio to retrieve the information from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record details within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/records/assignments/summaries": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get summary information on all open assignments for a user in all Portfolios the user has access to. An additional call to /records/assignments/details is required to obtain the details per table type",
        "description": "Returns list of open assignment summaries across all Portfolios and Projects the user has access to",
        "operationId": "Records_GetOpenAssignmentSummariesForAllPortfolios",
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record summaries in all Portfolios.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/records/assignments/summaries": {
      "get": {
        "tags": [
          "Records"
        ],
        "summary": "Get information on all open assignment summaries for a user in a single Portfolio. An additional call to /records/assignments/details is required to obtain the details per table type.",
        "description": "Returns list of open assignment summaries in all Projects the user has access to within the specified Portfolio",
        "operationId": "Records_GetOpenAssignmentSummariesForOnePortfolio",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The primary key of the portfolio to retrieve the information from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record details within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/records/assignments/details": {
      "post": {
        "tags": [
          "Records"
        ],
        "summary": "Get information on all open assignment details for a user in a specific Portfolio",
        "description": "Returns list of open assignment details in all Projects the user has access to within the specified Portfolio",
        "operationId": "Records_GetOpenAssignmentsDetailsForOnePortfolio",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "The primary key of the portfolio to retrieve the information from.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentDetailsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentDetailsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentDetailsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignmentDetailsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the requested user accessible record details within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assignment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/reportGenerator": {
      "post": {
        "tags": [
          "ReportGenerator"
        ],
        "summary": "Submit a request to initiate the asynchronous generation of a report",
        "operationId": "ReportGenerator_InitiateReportGeneration",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing information on which records to generate the report for and options to control the output.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcceptedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "202": {
            "description": "Returns the request identifier that can be used to retrieve the resultant report once the generation has completed."
          }
        }
      }
    },
    "/{portfolioGuid}/reportGenerator/{id}": {
      "delete": {
        "tags": [
          "ReportGenerator"
        ],
        "summary": "Delete the executing report generation request",
        "operationId": "ReportGenerator_DeleteReportRequest",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion was successful."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "ReportGenerator"
        ],
        "summary": "Retrieves the file generated as a result of the generation request.",
        "description": "Returns the Report Content that was generated.\r\nIf the request has not completed yet or has completed with errors, the appropriate response code will be returned.",
        "operationId": "ReportGenerator_GetGeneratedReportContent",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The Id in the AcceptedResponse returned by the post request",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "description": "Redirection OK",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the generated report content."
          },
          "202": {
            "description": "The report is still being processed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "An error occurred during the generation of the report. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "410": {
            "description": "The report request has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/rfis/{rfiId}": {
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get Individual RFI Record",
        "description": "Returns the requested RFI that the user has access to within the specified portfolio and project.",
        "operationId": "RFI_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rfiId",
            "in": "path",
            "description": "RFI ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested RFI that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFI"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFI"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "RFI"
        ],
        "summary": "Delete Individual RFI Record",
        "description": "Returns the result of deletion",
        "operationId": "RFI_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rfiId",
            "in": "path",
            "description": "RFI ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested RFI is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/rfis": {
      "post": {
        "tags": [
          "RFI"
        ],
        "summary": "Creates/Updates Individual RFI",
        "description": "Returns the created/updated RFI record that the user has access to within the specified portfolio and project.",
        "operationId": "RFI_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RFI"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RFI"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RFI"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RFI"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated RFI information that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFI"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RFI"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get Collection of RFI records, including all children.",
        "description": "Returns the list of user accessible RFI records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "RFI_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible RFI records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/rfis/query": {
      "post": {
        "tags": [
          "RFI"
        ],
        "summary": "Get Collection of RFI records, including all children, based on a query request.",
        "description": "Returns the list of user accessible RFI records for the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "RFI_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible RFI records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/rfis/list": {
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get Collection of RFI records, not including their children.",
        "description": "Returns the list of user accessible RFIs for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "RFI_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible RFI records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/rfis/list": {
      "post": {
        "tags": [
          "RFI"
        ],
        "summary": "Get Collection of RFI records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible RFI records for the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "RFI_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible RFI records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RFI"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/rfis/workflowstates": {
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get WorkflowStates for RFI Record",
        "description": "Returns list of Workflow Statuses for RFI within the specified Portfolio and Project.",
        "operationId": "RFI_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime - Optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/rfis/reports": {
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get list of all available reports for RFI",
        "description": "Returns the list of user accessible Reports for RFI",
        "operationId": "RFI_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/rfis/udfs": {
      "get": {
        "tags": [
          "RFI"
        ],
        "summary": "Get list of all available UDFs for RFI",
        "description": "Returns the list of UDFs for RFI",
        "operationId": "RFI_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/usergroups": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get UserGroups Information",
        "description": "Returns User Group (aka Security Role) information within the specified Portfolio",
        "operationId": "Role_Get",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns usergroups information within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/usergroups/{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get individual UserGroup",
        "description": "Returns the specified User Group (aka Security Role) that the user has access to within the specified Portfolio",
        "operationId": "Role_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "UserGroup ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the specified usergroup that the user has access to within the specified portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "404": {
            "description": "Server has not found anything matching the requested information."
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/safetynotices/{safetyNoticeId}": {
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get Individual SafetyNotice Record",
        "description": "Returns the specified Safety Notice that the user has access to within the specified portfolio and project",
        "operationId": "SafetyNotice_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "safetyNoticeId",
            "in": "path",
            "description": "SafetyNotice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible SafetyNotice within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyNotice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyNotice"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Delete Individual SafetyNotice Record",
        "description": "Returns the result of deletion",
        "operationId": "SafetyNotice_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "safetyNoticeId",
            "in": "path",
            "description": "SafetyNotice ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested SafetyNotice is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/safetynotices": {
      "post": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Creates/updates Individual SafetyNotice",
        "description": "Returns the created/updated Safety Notice given by the user",
        "operationId": "SafetyNotice_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SafetyNotice"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SafetyNotice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SafetyNotice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SafetyNotice"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible SafetyNotice within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyNotice"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyNotice"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get Collection of SafetyNotice records, including all children.",
        "description": "Returns the list of Safety Notice records that the user has access to within the specified portfolio and project based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SafetyNotice_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible SafetyNotice based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/safetynotices/query": {
      "post": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get Collection of SafetyNotice records, including all children, based on a query request.",
        "description": "Returns the list of Safety Notice records that the user has access to within the specified portfolio and project based on the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SafetyNotice_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible SafetyNotice based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/safetynotices/list": {
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get Collection of SafetyNotice records, not including their children.",
        "description": "Returns the list of Safety Notice records that the user has access to within the specified portfolio and project based on the given offset and limit value.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SafetyNotice_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible SafetyNotice based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/safetynotices/list": {
      "post": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get Collection of SafetyNotice records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of Safety Notice records that the user has access to within the specified portfolio and project based on the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SafetyNotice_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check on the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible SafetyNotice based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyNotice"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/safetynotices/workflowstates": {
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get WorkflowStates for SafetyNotice Record",
        "description": "Returns list of Workflow Statuses for SafetyNotice within the specified Portfolio and Project.",
        "operationId": "SafetyNotice_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/safetynotices/reports": {
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get list of all available reports for SafetyNotice",
        "description": "Returns the list of user accessible Reports for SafetyNotice",
        "operationId": "SafetyNotice_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/safetynotices/udfs": {
      "get": {
        "tags": [
          "SafetyNotice"
        ],
        "summary": "Get list of all available UDFs for SafetyNotice",
        "description": "Returns the list of UDFs for SafetyNotice",
        "operationId": "SafetyNotice_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/SubContractCOs/{changeOrderId}": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get Individual SubContractCO Record",
        "description": "Returns the requested Subcontract Change Order that the user has access to within the specified portfolio and project.",
        "operationId": "SubContractCO_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changeOrderId",
            "in": "path",
            "description": "SubContract Change Order ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested SubContractCO that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubContractCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubContractCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Delete Individual SubContractCO Record",
        "description": "Returns the result of deletion",
        "operationId": "SubContractCO_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "changeOrderId",
            "in": "path",
            "description": "SubContract Change Order ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested SubContractCO is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/SubContractCOs": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get Collection of SubContractCO records, including all children.",
        "description": "Returns the list of user accessible Subcontract Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SubContractCO_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Subcontract Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Creates/Updates Individual SubContractCO",
        "description": "Returns the created/updated Subcontract Change Order records that the user has access to within the specified portfolio and\r\nproject.",
        "operationId": "SubContractCO_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubContractCO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubContractCO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubContractCO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubContractCO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Subcontract Change Order records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubContractCO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubContractCO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/SubContractCOs/query": {
      "post": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get Collection of SubContractCO records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Subcontract Change Order records for the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SubContractCO_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Subcontract Change Order records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/SubContractCOs/list": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get Collection of SubContractCO records, not including their children.",
        "description": "Returns the list of user accessible Subcontract Change Order records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SubContractCO_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Subcontract Change Order records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/SubContractCOs/list": {
      "post": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get Collection of SubContractCO records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Subcontract Change Order records for the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SubContractCO_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Subcontract Change Order records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubContractCO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/SubContractCOs/workflowstates": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get WorkflowStates for SubContractCO Record",
        "description": "Returns the list of Workflow Statuses for SubContractCO within the specified Portfolio and Project.",
        "operationId": "SubContractCO_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/SubContractCOs/reports": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get list of all available reports for SubContractCO",
        "description": "Returns the list of user accessible Reports for SubContractCO",
        "operationId": "SubContractCO_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/SubContractCOs/udfs": {
      "get": {
        "tags": [
          "SubContractCO"
        ],
        "summary": "Get list of all available UDFs for SubContractCO",
        "description": "Returns the list of UDFs for SubContractCO",
        "operationId": "SubContractCO_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittals/{submittalId}": {
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get Individual Submittal Record",
        "description": "Returns the specified Submittal that the user has access to within the specified portfolio and project",
        "operationId": "Submittal_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "submittalId",
            "in": "path",
            "description": "Submittal ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Submittal within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submittal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submittal"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Submittal"
        ],
        "summary": "Delete Individual Submittal Record",
        "description": "Returns the result of deletion",
        "operationId": "Submittal_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "submittalId",
            "in": "path",
            "description": "Submittal ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested Submittal is deleted."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized Access"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittals": {
      "post": {
        "tags": [
          "Submittal"
        ],
        "summary": "Creates/Updates Individual Submittal",
        "description": "Returns the created/updated Submittal given by the user",
        "operationId": "Submittal_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Submittal Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Submittal"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Submittal"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Submittal"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Submittal"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible Submittal within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submittal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submittal"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get Collection of Submittal records, including all children.",
        "description": "Returns the list of Submittal records that the user has access to within the specified portfolio and project based on the\r\ngiven offset and limit value. Example: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Submittal_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittals based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittals/query": {
      "post": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get Collection of Submittal records, including all children, based on a query request.",
        "description": "Returns the list of Submittal records that the user has access to within the specified portfolio and project based on the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Submittal_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittals based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittals/list": {
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get Collection of Submittal records, not including their children.",
        "description": "Returns the list of Submittal records that the user has access to within the specified portfolio and project based on the\r\ngiven offset and limit value. Example: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Submittal_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittals based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittals/list": {
      "post": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get Collection of Submittal records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of Submittal records that the user has access to within the specified portfolio and project based on the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Submittal_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittals based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submittal"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittals/workflowstates": {
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get WorkflowStates for Submittal Record",
        "description": "Returns the list of Workflow Statuses for Submittal within the specified Portfolio and Project.",
        "operationId": "Submittal_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittals/reports": {
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get list of all available Reports for Submittal",
        "description": "Returns the list of user accessible Reports for Submittal",
        "operationId": "Submittal_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittals/udfs": {
      "get": {
        "tags": [
          "Submittal"
        ],
        "summary": "Get list of all available UDFs for Submittal",
        "description": "Returns the list of UDFs for Submittal",
        "operationId": "Submittal_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittalpackages/{submittalId}": {
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get Individual SubmittalPackage Record",
        "description": "Returns the specified Submittal Package that the user has access to within the specified portfolio and project",
        "operationId": "SubmittalPackage_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "submittalId",
            "in": "path",
            "description": "Submittal Package ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested user accessible Submittal Package within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmittalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmittalPackage"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Delete Individual SubmittalPackage Record",
        "description": "Returns the result of deletion",
        "operationId": "SubmittalPackage_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "submittalId",
            "in": "path",
            "description": "Submittal Package ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the empty response as the requested Submittal Package is deleted."
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Unauthorized Access"
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittalpackages": {
      "post": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Creates/Updates Individual SubmittalPackage",
        "description": "Returns the created/updated Submittal Package given by the user",
        "operationId": "SubmittalPackage_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Submittal Package Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmittalPackage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmittalPackage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmittalPackage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmittalPackage"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the created/updated user accessible Submittal Package within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmittalPackage"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmittalPackage"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get Collection of SubmittalPackage records, including all children.",
        "description": "Returns the list of Submittal Package records that the user has access to within the specified portfolio and project based on the\r\ngiven offset and limit value. Example: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SubmittalPackage_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittal Packages based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittalpackages/query": {
      "post": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get Collection of Submittal Package records, including all children, based on a query request.",
        "description": "Returns the list of Submittal Package records that the user has access to within the specified portfolio and project based on the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "SubmittalPackage_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittal Packages based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittalpackages/list": {
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get Collection of Submittal Package records, not including their children.",
        "description": "Returns the list of Submittal Package records that the user has access to within the specified portfolio and project based on the\r\ngiven offset and limit value. Example: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SubmittalPackage_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittal Packages based on the given offset and limit value.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittalpackages/list": {
      "post": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get Collection of Submittal Package records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of Submittal Package records that the user has access to within the specified portfolio and project based on the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "SubmittalPackage_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact the administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "200": {
            "description": "Returns the requested list of user accessible Submittal Packages based on the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubmittalPackage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/submittalpackages/workflowstates": {
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get WorkflowStates for SubmittalPackage Record",
        "description": "Returns the list of Workflow Statuses for SubmittalPackage within the specified Portfolio and Project.",
        "operationId": "SubmittalPackage_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittalpackages/reports": {
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get list of all available reports for SubmittalPackage",
        "description": "Returns the list of user accessible Reports for SubmittalPackage",
        "operationId": "SubmittalPackage_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/submittalpackages/udfs": {
      "get": {
        "tags": [
          "SubmittalPackage"
        ],
        "summary": "Get list of all available UDFs for SubmittalPackage",
        "description": "Returns the list of UDFs for SubmittalPackage",
        "operationId": "SubmittalPackage_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/transmittals/{poId}": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get Individual Transmittal Record",
        "description": "Returns the requested Transmittal that the user has access to within the specified portfolio and project.",
        "operationId": "Transmittal_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "Transmittal ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested Transmittal that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transmittal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transmittal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Delete Individual Transmittal Record",
        "description": "Returns the result of deletion",
        "operationId": "Transmittal_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "poId",
            "in": "path",
            "description": "Transmittal ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response as the requested Transmittal is deleted."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/transmittals": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get Collection of Transmittal records, including all children.",
        "description": "Returns the list of user accessible Transmittal records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Transmittal_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Transmittal records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Creates/Updates Individual Transmittal",
        "description": "Returns the created/updated Transmittal record that the user has access to within the specified portfolio and\r\nproject.",
        "operationId": "Transmittal_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Transmittal"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transmittal"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Transmittal"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Transmittal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated Transmittal records that the user has access to within the specified portfolio and project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transmittal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transmittal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/transmittals/query": {
      "post": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get Collection of Transmittal records, including all children, based on a query request.",
        "description": "Returns the list of user accessible Transmittal records for the given request.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "Transmittal_ListWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Transmittal records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/transmittals/list": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get Collection of Transmittal records, not including their children.",
        "description": "Returns the list of user accessible Transmittal records for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Transmittal_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Transmittal records for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/transmittals/list": {
      "post": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get Collection of Transmittal records based on a query request which can optionally specify which children to retrieve",
        "description": "Returns the list of user accessible Transmittal records for the given request.\r\nThis is the preferred endpoint for retrieving lists of records",
        "operationId": "Transmittal_ListOnlyWithQuery",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The query request",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Transmittal records for the given request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transmittal"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/transmittals/workflowstates": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get WorkflowStates for Transmittal Record",
        "description": "Returns the list of Workflow Statuses for Transmittal within the specified Portfolio and Project.",
        "operationId": "Transmittal_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dtLastSyncDateTime",
            "in": "query",
            "description": "Last Sync DateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/transmittals/reports": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get list of all available reports for Transmittal",
        "description": "Returns the list of user accessible Reports for Transmittal",
        "operationId": "Transmittal_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/transmittals/udfs": {
      "get": {
        "tags": [
          "Transmittal"
        ],
        "summary": "Get list of all available UDFs for Transmittal",
        "description": "Returns the list of UDFs for Transmittal",
        "operationId": "Transmittal_UDFs",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of UDFs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UDF"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/users/list": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Collection of Users, including all children.",
        "description": "Returns the list of Users within the specified portfolio for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.\r\nThis endpoint can return a large amount of data and should be used sparingly.",
        "operationId": "User_List",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of users within the requested Portfolio for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/users/listOnly": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Collection of Users, not including children.",
        "description": "Returns the list of Users within the specified portfolio for the given offset and limit.\r\nExample: If offset = 0 and limit = 4, then this action returns the first four records.",
        "operationId": "User_ListOnly",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of records to be skipped from the beginning",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of records to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of users within the requested Portfolio for the given offset and limit.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Individual User Information",
        "description": "Returns the requested User Information within the specified Portfolio",
        "operationId": "User_GetByID",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user details within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete Individual User",
        "description": "Returns the result of deletion",
        "operationId": "User_Delete",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete the requested user within the specified Portfolio."
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "400": {
            "description": "Provided input is not valid"
          }
        }
      }
    },
    "/{portfolioGuid}/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Individual User Information",
        "description": "Returns the requested User Information within the specified Portfolio",
        "operationId": "User_GetByName",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "User Name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user details within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create/Update Portfolio User",
        "description": "Returns the created/updated User record within the specified Portfolio",
        "operationId": "User_Post",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User Record",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created/updated user information within the specified Portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/users/reports": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get list of all available reports for User",
        "description": "Returns the list of user accessible Reports for User",
        "operationId": "User_Reports",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of user accessible Reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    },
    "/{portfolioGuid}/{projectId}/workflowstates/{tableType}": {
      "get": {
        "tags": [
          "WorkflowStates"
        ],
        "summary": "Get WorkflowStates for any table type",
        "description": "Returns list of Workflow Statuses for a give table type within the specified Portfolio and Project.\r\nThis is the primary method for retrieving Workflow Statuses for child table types such as DailyWork and Checklist Approvers",
        "operationId": "WorkflowStates_GetWorkflowStates",
        "parameters": [
          {
            "name": "portfolioGuid",
            "in": "path",
            "description": "Portfolio GUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project primary key. This can be 0 to retrieve records at the portfolio level.",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tableType",
            "in": "path",
            "description": "The table type to retrieve the statuses for.",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastSyncDateTime",
            "in": "query",
            "description": "The timestamp to be used when asking only for records that have changed since a specific known time",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the requested user accessible workflowstates within the specified Portfolio and Project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowState"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "403": {
            "description": "Server refuses to fulfill the request. Please check the error message for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. Please contact your administrator for more details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceptedResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id that should be used to retrieve the generated content",
            "format": "int32"
          },
          "Href": {
            "type": "string",
            "description": "The URI that can be used to retrieve the generated content",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Returned in response to a request to generate a report or download a drawing"
      },
      "Account": {
        "type": "object",
        "properties": {
          "AccountID": {
            "type": "integer",
            "description": "The primary key for the account",
            "format": "int32"
          },
          "AccountName": {
            "type": "string",
            "description": "The name of the Account",
            "nullable": true
          },
          "ERPEnterpriseId": {
            "type": "string",
            "description": "For internal use only",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "Information about a single Account that can be used to create a new Portfolio"
      },
      "ActionItem": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 50",
            "format": "int32",
            "readOnly": true
          },
          "ActionItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 138",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 139",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromMeetingItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromMeetingID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromMeetingItemNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromMeetingItemTopic": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromMeetingDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "FromMeetingName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "OriginatedFromMeeting": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "OriginatedFromMeetingItem": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Address": {
        "required": [
          "NameOfLocation"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 17",
            "format": "int32",
            "readOnly": true
          },
          "AddressID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "NameOfLocation": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "DisplayAddress": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Address1": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Address2": {
            "maxLength": 75,
            "type": "string",
            "nullable": true
          },
          "Address3": {
            "maxLength": 75,
            "type": "string",
            "nullable": true
          },
          "City": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "State": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Zip": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "Country": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Tel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "TollFree": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Fax": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "EMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "TypeOfAddressID": {
            "type": "integer",
            "description": "Lookup List Section 1",
            "format": "int32",
            "nullable": true
          },
          "TypeOfAddress": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsMainAddress": {
            "type": "boolean",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ApplicationForPayment": {
        "required": [
          "ApplicationDate",
          "ApplicationNumber",
          "AuthorContactID",
          "ContractID",
          "PeriodID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 153",
            "format": "int32",
            "readOnly": true
          },
          "ApplicationForPayID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32"
          },
          "ContractNumberAndDescription": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The Contract's ContractNumber and Description combined",
            "nullable": true,
            "readOnly": true
          },
          "ApplicationNumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Sequence": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "PeriodID": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ApplicationDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "ApprovedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "PaidDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 102",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ChgsAddPrevPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsDdtPrevPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsAddThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsDdtThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChangesToDate": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RevisedContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleted": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalLessRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PreviousTotalLessRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentDue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToInvoice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "WorkCompRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "MatStoredRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsLockedByAFP": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "OkToCopyCSOV": {
            "type": "boolean",
            "nullable": true
          },
          "OriginalContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ApplicationForPaymentItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationForPaymentItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ApplicationForPaymentItem": {
        "required": [
          "Description",
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 154",
            "format": "int32",
            "readOnly": true
          },
          "AppForPayItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ApplicationForPayID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 154",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduledQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduledValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PreviousQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevWorkMatInstallValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ThisInvoiceQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WorkThisInvoiceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "MatInstallThisInvoiceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StoredMaterialValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PrevStoredMaterialValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleteQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevTotalCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetCurrentDue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToCompleteQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalWorkMatInstallValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "GeneralRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "GeneralRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "StoredMatRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StoredMatRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevTotalRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LinkedTableType": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "LinkedContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "LinkedPayAppSumDesc": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Assignee": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 12",
            "format": "int32",
            "readOnly": true
          },
          "AssigneeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Status": {
            "enum": [
              "NotDone",
              "Done"
            ],
            "type": "string",
            "nullable": true
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactEMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "PortfolioId": {
            "type": "string",
            "description": "The primary key of the portfolio the assignment belongs to.",
            "format": "uuid"
          },
          "PortfolioName": {
            "type": "string",
            "description": "The name of the portfolio the assignment belongs to.",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "description": "The primary key of the project the assignment belongs to.\r\nThis will never be 0 because assignments cannot be made at the Portfolio level",
            "format": "int32"
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the project the assignment belongs to.",
            "nullable": true
          },
          "TableType": {
            "type": "integer",
            "description": "The ProjectSight record type for the record the assignment has been made for.",
            "format": "int32"
          },
          "PrimaryKey": {
            "type": "integer",
            "description": "The primary key for the record the assignment has been made for. This will be unique within the requested portfolio, but not among portfolios.",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "description": "The unique identifier for record the assignment has been made for.",
            "format": "uuid"
          },
          "Summmary": {
            "type": "string",
            "description": "The summary of the record the assignment has been made for.",
            "nullable": true
          },
          "WorkflowState": {
            "type": "integer",
            "description": "The primary key of the WorkflowState that the record the assignment has been made for is currently in.",
            "format": "int32"
          },
          "WorkflowStateName": {
            "type": "string",
            "description": "The name of the WorkflowState that the record the assignment has been made for is currently in.",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "The due date for the assignment. This will be converted to the user's time zone and will be in the form yyyy-MM-dd.\r\nThis may be empty if the assignment does not have a Due Date.",
            "nullable": true
          },
          "ChildTableGuids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of child table guids that this record refers to.\r\nThis field is optional, based on whether the table type supports child records.",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "This class provides results for /records/assignments endpoints\r\nThis class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "AssignmentDetailsRequest": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "The tableType to filter by",
            "format": "int32"
          },
          "Guids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of guids specifying the records to get assignment details for",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request object used when querying for assignment details for a list of records by guid.\r\nThey must be associated with a single table type"
      },
      "Budget": {
        "required": [
          "Description",
          "UOMID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 119",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeID": {
            "type": "integer",
            "description": "Lookup List Section 130",
            "format": "int32",
            "nullable": true
          },
          "RevenueCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeCode": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeDescription": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AliasCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Group1": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group1Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group1ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group2": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group2Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group2ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group3": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group3Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group3ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group4": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group4Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group4ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group5": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group5Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group5ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group6": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group6Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group6ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group7": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group7Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group7ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group8": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group8Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group8ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Group9": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group9Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group9ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "UOMID": {
            "type": "integer",
            "description": "Lookup List Section 103",
            "format": "int32"
          },
          "UOM": {
            "maxLength": 150,
            "type": "string",
            "description": "The actual display field for the UOM. It is a combination of the code and description, if available.",
            "nullable": true,
            "readOnly": true
          },
          "UOMCode": {
            "maxLength": 30,
            "type": "string",
            "description": "The Code for the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The Description of the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMIsUnitPrice": {
            "type": "boolean",
            "description": "The Unit Price flag from the lookup list.",
            "readOnly": true
          },
          "OriginalBudget": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetUnitPrice": {
            "type": "number",
            "description": "OriginalBudget divided by OriginalBudgetQuantity. This is disabled once the Budget is approved.",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetQuantity": {
            "type": "number",
            "description": "If OriginalBudget is not 0 and this value is 0, this value will be automatically set to 1. This is disabled once the Budget is approved.",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetHours": {
            "type": "number",
            "description": "This is disabled once the Budget is approved.",
            "format": "double",
            "nullable": true
          },
          "ApprovedBudgetRevs": {
            "type": "number",
            "description": "Sum of BdgtAppliedAmount for PotentialCOItems with BdgtAllocationCode set to ApprovedRevisions",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsUnitPrice": {
            "type": "number",
            "description": "ApprovedBudgetRevs / ApprovedBudgetRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsQuantity": {
            "type": "number",
            "description": "Sum of BdgtAppliedQuantity for PotentialCOItems with BdgtAllocationCode set to ApprovedRevisions",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsHours": {
            "type": "number",
            "description": "Sum of BdgtAppliedHours for PotentialCOItems with BdgtAllocationCode set to ApprovedRevisions",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudget": {
            "type": "number",
            "description": "OriginalBudget + ApprovedBudgetRevs",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetUnitPrice": {
            "type": "number",
            "description": "CurrentBudget / CurrentBudgetQuantity",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetQuantity": {
            "type": "number",
            "description": "OriginalBudgetQuantity + ApprovedBudgetRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetHours": {
            "type": "number",
            "description": "OriginalBudgetHours + ApprovedBudgetRevsHours",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevs": {
            "type": "number",
            "description": "Sum of BdgtAppliedAmount for PotentialCOItems with BdgtAllocationCode set to PendingRevisions",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsUnitPrice": {
            "type": "number",
            "description": "PendingBudgetRevs / PendingBudgetRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsQuantity": {
            "type": "number",
            "description": "Sum of BdgtAppliedQuantity for PotentialCOItems with BdgtAllocationCode set to PendingRevisions",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsHours": {
            "type": "number",
            "description": "Sum of BdgtAppliedHours for PotentialCOItems with BdgtAllocationCode set to PendingRevisions",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevs": {
            "type": "number",
            "description": "Sum of BdgtAppliedAmount for PotentialCOItems with BdgtAllocationCode set to ApproximateRevisions",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsUnitPrice": {
            "type": "number",
            "description": "ApproxBudgetRevs / ApproxBudgetRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsQuantity": {
            "type": "number",
            "description": "Sum of BdgtAppliedQuantity for PotentialCOItems with BdgtAllocationCode set to ApproximateRevisions",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsHours": {
            "type": "number",
            "description": "Sum of BdgtAppliedHours for PotentialCOItems with BdgtAllocationCode set to ApproximateRevisions",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudget": {
            "type": "number",
            "description": "CurrentBudget + PendingBudgetRevs + ApproxBudgetRevs",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetUnitPrice": {
            "type": "number",
            "description": "ProjectedBudget / ProjectedBudgetQuantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetQuantity": {
            "type": "number",
            "description": "CurrentBudgetQuantity + PendingBudgetRevsQuantity + ApproxBudgetRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetHours": {
            "type": "number",
            "description": "CurrentBudgetHours + PendingBudgetRevsHours + ApproxBudgetRevsHours",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitments": {
            "type": "number",
            "description": "Sum of ContractSchedOfValues.ScheduledValue + greater of PurchaseOrderItems Subtotal or InvoicedAmount + greater of PurchaseOrder TaxTotal or TaxInvoiced + GeneralInvoiceItems.Subtotal when GeneralInvoice linked to PurchaseOrder but GeneralInvoiceItem is not linked to PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsUnitPrice": {
            "type": "number",
            "description": "OriginalCommitments / OriginalCommitmentsQuantity",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsQuantity": {
            "type": "number",
            "description": "Sum of ContractSchedOfValues.ScheduledQty + greater of PurchaseOrderItems.Quantity or PurchaseOrderItems.InvoicedQuantity + GeneralInvoiceItems.Quantity when GeneralInvoice linked to PurchaseOrder but GeneralInvoiceItem is not linked to PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsHours": {
            "type": "number",
            "description": "Sum of ContractSchedOfValues.ScheduledHours",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevs": {
            "type": "number",
            "description": "Sum of CostAppliedAmount for PotentialCOItems with CostAllocationCode set to one of the Linked values",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsUnitPrice": {
            "type": "number",
            "description": "ApprovedCommitmentRevs / ApprovedCommitmentRevsQuantity",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsQuantity": {
            "type": "number",
            "description": "Sum of CostAppliedQuantity for PotentialCOItems with CostAllocationCode set to one of the Linked values",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsHours": {
            "type": "number",
            "description": "Sum of CostAppliedHours for PotentialCOItems with CostAllocationCode set to one of the Linked values",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCosts": {
            "type": "number",
            "description": "Sum of Subtotal for GeneralInvoiceItems in GeneralInvoices not linked to PurchaseOrders + GeneralInvoice.TaxTotal when not linked to PurchaseOrder",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCostsUnitPrice": {
            "type": "number",
            "description": "NonCommitmentCosts / NonCommitmentCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCostsQuantity": {
            "type": "number",
            "description": "Sum of Quantity for GeneralInvoiceItems in GeneralInvoices not linked to PurchaseOrders",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCosts": {
            "type": "number",
            "description": "OriginalCommitments + ApprovedCommitmentRevs + NonCommitmentCosts",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsUnitPrice": {
            "type": "number",
            "description": "TotalCommittedCosts / TotalCommittedCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsQuantity": {
            "type": "number",
            "description": "OriginalCommitmentsQuantity + ApprovedCommitmentRevsQuantity + NonCommitmentCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsHours": {
            "type": "number",
            "description": "OriginalCommitmentsHours + ApprovedCommitmentRevsHours",
            "format": "double",
            "readOnly": true
          },
          "DirectCosts": {
            "type": "number",
            "description": "Sum of the JobCosts imported from the ERP",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCosts": {
            "type": "number",
            "description": "If OriginalBudget is less than 0 or UnCommittedCostsActual is greater than 0, UnCommittedCostsActual. Otherwise, 0.",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsUnitPrice": {
            "type": "number",
            "description": "UnCommittedCosts / UnCommittedCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsQuantity": {
            "type": "number",
            "description": "OriginalBudgetQuantity - OriginalCommitmentsQuantity - NonCommitmentCostsQuantity - SUM of PotentialCOItems CostAppliedQuantity where CostAllocationCode is one of UseUncommittedCostsPending, UseUncommittedCostsApproximate, LinkedUseUncommittedCostsPending, LinkedUseUncommittedCostsApproximate, LinkedNoCostAllocation  + SUM of PotentialCOItems CostAppliedQuantity where CostAllocationCode is AddToUncommittedCost",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsHours": {
            "type": "number",
            "description": "OriginalBudgetHours - OriginalCommitmentsHours - NonCommitmentCostsHours - SUM of PotentialCOItems BdgtAppliedHours where CostAllocationCode is one of UseUncommittedCostsPending, UseUncommittedCostsApproximate, LinkedUseUncommittedCostsPending, LinkedUseUncommittedCostsApproximate, LinkedNoCostAllocation  + SUM of PotentialCOItems BdgtAppliedHours where CostAllocationCode is AddToUncommittedCost",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsActual": {
            "type": "number",
            "description": "OriginalBudget - OriginalCommitments - NonCommitmentCosts - DirectCosts - SUM of PotentialCOItems CostAppliedAmount where CostAllocationCode is one of UseUncommittedCostsPending, UseUncommittedCostsApproximate, LinkedUseUncommittedCostsPending, LinkedUseUncommittedCostsApproximate, LinkedNoCostAllocation + SUM of PotentialCOItems CostAppliedAmount where CostAllocationCode is AddToUncommittedCost",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitment": {
            "type": "number",
            "description": "Sum of CostAppliedAmount for PotentialCOItems with CostAllocationCode set to either AddToPendingCommitment or UseUncommittedCostsPending",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentUnitPrice": {
            "type": "number",
            "description": "PendingCommitment / PendingCommitmentQuantity",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentQuantity": {
            "type": "number",
            "description": "Sum of CostAppliedQuantity for PotentialCOItems with CostAllocationCode set to either AddToPendingCommitment or UseUncommittedCostsPending",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentHours": {
            "type": "number",
            "description": "Sum of BdgtAppliedHours for PotentialCOItems with CostAllocationCode set to either AddToPendingCommitment or UseUncommittedCostsPending",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitment": {
            "type": "number",
            "description": "Sum of CostAppliedAmount for PotentialCOItems with CostAllocationCode set to either AddToApproximateCommitment or UseUncommittedCostsApproximate",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentUnitPrice": {
            "type": "number",
            "description": "ApproxCommitment / ApproxCommitmentQuantity",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentQuantity": {
            "type": "number",
            "description": "Sum of CostAppliedQuantity for PotentialCOItems with CostAllocationCode set to either AddToApproximateCommitment or UseUncommittedCostsApproximate",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentHours": {
            "type": "number",
            "description": "Sum of CostAppliedHours for PotentialCOItems with CostAllocationCode set to either AddToApproximateCommitment or UseUncommittedCostsApproximate",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCost": {
            "type": "number",
            "description": "TotalCommittedCosts + UnCommittedCosts + PendingCommitment + ApproxCommitment + DirectCosts",
            "format": "double",
            "readOnly": true
          },
          "Hours": {
            "type": "number",
            "description": "The actual hours for payroll.",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostUnitPrice": {
            "type": "number",
            "description": "ProjectedCost / ProjectedCostQuantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostQuantity": {
            "type": "number",
            "description": "TotalCommittedCostsQuantity + UnCommittedCostsQuantity + PendingCommitmentQuantity + ApproxCommitmentQuantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostHours": {
            "type": "number",
            "description": "TotalCommittedCostsHours + UnCommittedCostsHours + PendingCommitmentHours + ApproxCommitmentHours",
            "format": "double",
            "readOnly": true
          },
          "ForecastToComplete": {
            "type": "number",
            "description": "When ForecastToCompleteType is LumpSum, this will be editable. Otherwise, it will be the sum of the line item amounts",
            "format": "double",
            "nullable": true
          },
          "ForecastToCompleteUnitPrice": {
            "type": "number",
            "description": "ForecastToComplete divided by ForecastToCompleteQuantity",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteQuantity": {
            "type": "number",
            "description": "When UOM is for Unit Pricing, the sum of all line items whose UOMID matches this record's",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastToCompleteType": {
            "enum": [
              "LumpSum",
              "LineItems"
            ],
            "type": "string",
            "nullable": true
          },
          "ForecastIncludesUncommittedCosts": {
            "type": "boolean",
            "nullable": true
          },
          "ForecastCost": {
            "type": "number",
            "description": "ProjectedCost + ForecastToComplete + UnCommittedCosts if ForecastIncludesUncommittedCosts is true",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostUnitPrice": {
            "type": "number",
            "description": "ForecastCost divided by ForecastCostQuantity",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostQuantity": {
            "type": "number",
            "description": "ProjectedCostQuantity + ForecastToCompleteQuantity + UnCommittedCostsQuantity if ForecastIncludesUncommittedCosts is true",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostHours": {
            "type": "number",
            "description": "ProjectedCostHours + ForecastToCompleteHours + UnCommittedCostsHours if ForecastIncludesUncommittedCosts is true",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOver": {
            "type": "number",
            "description": "Depends on field calculation setting: TotalCommittedCosts - CurrentBudget OR CurrentBudget - TotalCommittedCosts",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOverQuantity": {
            "type": "number",
            "description": "Depends on field calculation setting: TotalCommittedCostsQuantity - CurrentBudgetQuantity OR CurrentBudgetQuantity - TotalCommittedCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOverHours": {
            "type": "number",
            "description": "Depends on field calculation setting: TotalCommittedCostsHours - CurrentBudgetHours OR CurrentBudgetHours - TotalCommittedCostsHours",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOver": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCost - ProjectedBudget OR ProjectedBudget - ProjectedCost",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOverQuantity": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCostQuantity - ProjectedBudgetQuantity OR ProjectedBudgetQuantity - ProjectedCostQuantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOverHours": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCostHours - ProjectedBudgetHours OR ProjectedBudgetHours - ProjectedCostHours",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOver": {
            "type": "number",
            "description": "Depends on field calculation setting: ForecastCost - ProjectedBudget OR ProjectedBudget - ForecastCost",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOverQuantity": {
            "type": "number",
            "description": "Depends on field calculation setting: ForecastCostQuantity - ProjectedBudgetQuantity OR ProjectedBudgetQuantity - ForecastCostQuantity",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOverHours": {
            "type": "number",
            "description": "Depends on field calculation setting: ForecastCostHours - ProjectedBudgetHours OR ProjectedBudgetHours - ForecastCostHours",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriod": {
            "type": "number",
            "description": "Sum of NetCompleteValue for ContractInvoiceItems, Subtotal for GeneralInvoiceItems, and TaxTotal for GeneralInvoices, for the current cost period",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodUnitPrice": {
            "type": "number",
            "description": "CostThisPeriod / CostThisPeriodQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodQuantity": {
            "type": "number",
            "description": "Sum of ThisInvoiceQty for ContractInvoiceItems, for the current cost period",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodHours": {
            "type": "number",
            "description": "Sum of ThisInvoiceHours for ContractInvoiceItems, for the current cost period",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriod": {
            "type": "number",
            "description": "Sum of NetCompleteValue for ContractInvoiceItems, Subtotal for GeneralInvoiceItems, and TaxTotal for GeneralInvoices, up to and including the current cost period",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodUnitPrice": {
            "type": "number",
            "description": "CostToThisPeriod / CostToThisPeriodQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodQuantity": {
            "type": "number",
            "description": "Sum of ThisInvoiceQty for ContractInvoiceItems, up to and including the current cost period",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodHours": {
            "type": "number",
            "description": "Sum of ThisInvoiceHours for ContractInvoiceItems, up to and including the current cost period",
            "format": "double",
            "readOnly": true
          },
          "AdditionalActualCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsUnitPrice": {
            "type": "number",
            "description": "AdditionalActualCosts divided by AdditionalActualCostsQuantity",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsQuantity": {
            "type": "number",
            "description": "If AdditionalActualCosts is not 0 and this value is 0, this value will be automatically set to 1.",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToDate": {
            "type": "number",
            "description": "Sum of NetCompleteValue for ContractInvoiceItems, Subtotal for GeneralInvoiceItems, and TaxTotal for GeneralInvoices, for all cost periods + AdditionalActualCosts",
            "format": "double",
            "readOnly": true
          },
          "CostToDateUnitPrice": {
            "type": "number",
            "description": "CostToDate / CostToDateQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostToDateQuantity": {
            "type": "number",
            "description": "Sum of ThisInvoiceQty for ContractInvoiceItems, for all cost periods + AdditionalActualCostsQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostToDateHours": {
            "type": "number",
            "description": "Sum of ThisInvoiceHours for ContractInvoiceItems, for all cost periods + AdditionalActualCostsHours",
            "format": "double",
            "readOnly": true
          },
          "CostToComplete": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCost - CostToDate OR ForecastCost - CostToDate",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteUnitPrice": {
            "type": "number",
            "description": "CostToComplete / CostToCompleteQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteQuantity": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCostQuantity - CostToDateQuantity OR ForecastCostQuantity - CostToDateQuantity",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteHours": {
            "type": "number",
            "description": "Depends on field calculation setting: ProjectedCostHours - CostToDateHours OR ForecastCostHours - CostToDateHours",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "description": "Depends on field calculation setting: CostToDate / ProjectedCost OR CostToDate / ForecastCost",
            "format": "double",
            "readOnly": true
          },
          "PercentCompleteQuantity": {
            "type": "number",
            "description": "Depends on field calculation setting: CostToDateQuantity / ProjectedCostQuantity OR CostToDateQuantity / ForecastCostQuantity",
            "format": "double",
            "readOnly": true
          },
          "PercentCompleteHours": {
            "type": "number",
            "description": "Depends on field calculation setting: CostToDateHours / ProjectedCostHours OR CostToDateHours / ForecastCostHours",
            "format": "double",
            "readOnly": true
          },
          "ForecastStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastFinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastAllocType": {
            "enum": [
              "None",
              "BellCurve",
              "FrontLoad",
              "BackLoad",
              "Linear",
              "Plug"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPIntegrated": {
            "type": "boolean",
            "description": "This flag is intended for the use of AppXChange to indicate when a Budget record has been successfully integrated with the ERP",
            "nullable": true
          },
          "IsApproved": {
            "type": "boolean",
            "readOnly": true
          },
          "SofVItemID": {
            "type": "integer",
            "description": "A link to a ContractSchedOfValues item in a Prime Contract. Only settable through the API",
            "format": "int32",
            "nullable": true
          },
          "ContractItem": {
            "maxLength": 570,
            "type": "string",
            "description": "Based on SofVItemId: [Contract.Number]-[ContractSchedOfValues.ItemNumber] - [ContractSchedOfValues.Description]",
            "nullable": true,
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "description": "The primary key of the contract that SofVItemID belongs to",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ForecastToCompleteItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastToCompleteItem"
            },
            "description": "These values will only be used in calculations when ForecastToCompleteType is LineItems. They will be preserved if the value is LumpSum, but they will not change the value.",
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "BudgetCodeStructureItem": {
        "type": "object",
        "properties": {
          "OkToUse": {
            "type": "boolean",
            "description": "Indicates whether or not this group is used in the budget code"
          },
          "Level": {
            "type": "integer",
            "description": "The level (BudgetGroup) of this item",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "The name of the budget group",
            "nullable": true
          },
          "ShowInCode": {
            "type": "boolean",
            "description": "Indicates whether or not the budget group is displayed in the budget code"
          },
          "SeparatorID": {
            "type": "integer",
            "description": "The separator code. Space = 0, Period = 1",
            "format": "int32"
          },
          "ProjectID": {
            "type": "integer",
            "description": "The record's project primary key",
            "format": "int32"
          },
          "LastModified": {
            "type": "string",
            "description": "The Date/Time the record was last modified",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "Budget Code Structure Item"
      },
      "BudgetGroup": {
        "required": [
          "CodeID",
          "Description"
        ],
        "type": "object",
        "properties": {
          "BudgetGroupID": {
            "type": "integer",
            "description": "The record's primary key",
            "format": "int32",
            "nullable": true
          },
          "CodeID": {
            "minLength": 1,
            "type": "string",
            "description": "The Code for the record"
          },
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the record"
          },
          "ProjectID": {
            "type": "integer",
            "description": "The record's project primary key",
            "format": "int32"
          },
          "LastModified": {
            "type": "string",
            "description": "The Date/Time the record was last modified",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended to be retrieved or updated for a single group at a time which is why the GroupNumber is not present"
      },
      "BudgetSnapshot": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 120",
            "format": "int32",
            "readOnly": true
          },
          "SnapshotId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "BudgetSnapshotItem": {
        "required": [
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 121",
            "format": "int32",
            "readOnly": true
          },
          "SnapshotItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SnapshotId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeID": {
            "type": "integer",
            "description": "Lookup List Section 130",
            "format": "int32",
            "readOnly": true
          },
          "RevenueCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeCode": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeDescription": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AliasCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group1": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group1Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group1ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group2": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group2Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group2ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group3": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group3Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group3ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group4": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group4Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group4ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group5": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group5Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group5ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group6": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group6Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group6ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group7": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group7Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group7ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group8": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group8Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group8ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Group9": {
            "maxLength": 15,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group9Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Group9ID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMID": {
            "type": "integer",
            "description": "Lookup List Section 103",
            "format": "int32",
            "readOnly": true
          },
          "UOM": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMCode": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMDescription": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMIsUnitPrice": {
            "type": "boolean",
            "readOnly": true
          },
          "OriginalBudget": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalBudgetQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalBudgetHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevs": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudget": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentBudgetHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevs": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevs": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudget": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedBudgetHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitments": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "OriginalCommitmentsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevs": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedCommitmentRevsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NonCommitmentCostsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCommittedCostsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "DirectCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnCommittedCostsActual": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitment": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PendingCommitmentHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitment": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApproxCommitmentHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCost": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedCostHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastToComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastToCompleteType": {
            "enum": [
              "LumpSum",
              "LineItems"
            ],
            "type": "string",
            "nullable": true
          },
          "ForecastCost": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastCostHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOver": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentUnderOverHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOver": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectedUnderOverHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOver": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastUnderOverHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostThisPeriodHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToThisPeriodHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "AdditionalActualCosts": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "AdditionalActualCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "AdditionalActualCostsQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "AdditionalActualCostsHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToDate": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToDateUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToDateQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToDateHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostToCompleteHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentCompleteQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentCompleteHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ForecastFinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ForecastAllocType": {
            "enum": [
              "None",
              "BellCurve",
              "FrontLoad",
              "BackLoad",
              "Linear",
              "Plug"
            ],
            "type": "string",
            "nullable": true
          },
          "IsApproved": {
            "type": "boolean",
            "readOnly": true
          },
          "SofVItemID": {
            "type": "integer",
            "description": "A link to a ContractSchedOfValues item in a Prime Contract.",
            "format": "int32",
            "readOnly": true
          },
          "ContractItem": {
            "maxLength": 570,
            "type": "string",
            "description": "Based on SofVItemId: [Contract.Number]-[ContractSchedOfValues.ItemNumber] - [ContractSchedOfValues.Description]",
            "nullable": true,
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "description": "The primary key of the contract that SofVItemID belongs to",
            "format": "int32",
            "readOnly": true
          },
          "ERPIntegrated": {
            "type": "boolean",
            "description": "This flag is intended for the use of AppXChange to indicate when a Budget snapshot record has been successfully integrated with the ERP",
            "readOnly": true
          },
          "Hours": {
            "type": "number",
            "description": "The actual hours for payroll.",
            "format": "double",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SnapshotForecastToCompleteItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotForecastToCompleteItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "BudgetSnapshotTransaction": {
        "type": "object",
        "properties": {
          "SnapshotId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SnapshotItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "PrimaryKey": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TableType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ParentPrimaryKey": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ParentTableType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "OriginalBudget": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalBudgetHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedBudgetRevs": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentBudget": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentBudgetQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentBudgetHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingBudgetRevs": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxBudgetRevs": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxBudgetRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxBudgetRevsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxBudgetRevsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedBudget": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedBudgetUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedBudgetQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedBudgetHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalCommitments": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalCommitmentsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalCommitmentsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalCommitmentsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedCommitmentRevs": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedCommitmentRevsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedCommitmentRevsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedCommitmentRevsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NonCommitmentCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NonCommitmentCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NonCommitmentCostsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalCommittedCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalCommittedCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalCommittedCostsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalCommittedCostsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "DirectCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnCommittedCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnCommittedCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnCommittedCostsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnCommittedCostsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingCommitment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingCommitmentUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingCommitmentQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PendingCommitmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxCommitment": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxCommitmentUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxCommitmentQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApproxCommitmentHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedCostUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedCostQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedCostHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastToComplete": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastToCompleteUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastToCompleteQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastToCompleteHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastCostUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastCostQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastCostHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentUnderOver": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CurrentUnderOverHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedUnderOver": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectedUnderOverHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastUnderOver": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastUnderOverQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ForecastUnderOverHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostThisPeriod": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostThisPeriodUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostThisPeriodQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostThisPeriodHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToDate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToDateUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToDateQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToDateHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToComplete": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToCompleteUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToCompleteQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToCompleteHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToThisPeriod": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToThisPeriodUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToThisPeriodQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostToThisPeriodHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCosts": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AdditionalActualCostsHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentCompleteQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentCompleteHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "BulkDeleteResponse": {
        "type": "object",
        "properties": {
          "PrimaryKey": {
            "type": "integer",
            "description": "The primary key of the record whose deletion was requested",
            "format": "int32"
          },
          "Success": {
            "type": "boolean",
            "description": "True if the record was successfully deleted"
          },
          "ErrorMessage": {
            "type": "string",
            "description": "The error message if the record was not successfully deleted",
            "nullable": true
          },
          "ErrorCode": {
            "type": "integer",
            "description": "The error code, if any, if the record was not successfully deleted",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Used to return the result of a bulk delete operation"
      },
      "CSICode": {
        "type": "object",
        "properties": {
          "RecordId": {
            "type": "integer",
            "format": "int32"
          },
          "Code": {
            "type": "string",
            "nullable": true
          },
          "FormatType": {
            "type": "integer",
            "format": "int32"
          },
          "ParentID": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "The description of the item",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "ChangeOrderRequest": {
        "required": [
          "AuthorContactID",
          "CORNumber",
          "Description",
          "InitiatedDate",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 129",
            "format": "int32",
            "readOnly": true
          },
          "CORequestID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CORNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "InitiatedDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "RequiredDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "CompletedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "NTPDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ExecutedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 122",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RequestedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedDaysUnlocked": {
            "type": "boolean",
            "nullable": true
          },
          "RequestedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ChangeOrderRequestPotentialCOLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeOrderRequestPotentialCOLink"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ChangeOrderRequestPotentialCOLink": {
        "required": [
          "PCOID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 130",
            "format": "int32",
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32"
          },
          "CORequestID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "BdgtProposedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BdgtApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RevenueAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RequestedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 146",
            "format": "int32",
            "readOnly": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ReasonID": {
            "type": "integer",
            "description": "Lookup List Section 147",
            "format": "int32",
            "readOnly": true
          },
          "Reason": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Checklist": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "TemplateID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 189",
            "format": "int32",
            "readOnly": true
          },
          "ChecklistID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "TemplateID": {
            "type": "integer",
            "format": "int32"
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Revision": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkDescription": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLatest": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ChecklistItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistItem"
            },
            "nullable": true
          },
          "ChecklistApprovers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistApprover"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ChecklistApprover": {
        "required": [
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 191",
            "format": "int32",
            "readOnly": true
          },
          "ChecklistApproverID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChecklistID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ApprovedDate": {
            "type": "string",
            "nullable": true
          },
          "Role": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactEMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ApproverType": {
            "enum": [
              "None",
              "Regular",
              "Field",
              "Adhoc"
            ],
            "type": "string",
            "readOnly": true
          },
          "AdhocFirstName": {
            "maxLength": 25,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AdhocLastName": {
            "maxLength": 25,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AdhocEmail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AdhocCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ChecklistItem": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 190",
            "format": "int32",
            "readOnly": true
          },
          "ChecklistItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ChecklistID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "TemplateItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Yes",
              "No",
              "NA",
              "None"
            ],
            "type": "string",
            "nullable": true
          },
          "Value": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "WhenSigned": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsCopied": {
            "type": "boolean",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ValueType": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "IncludeYesNoNA": {
            "type": "boolean",
            "description": "Copied from the Template. Used to display or hide Yes/No/NA to the end user",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Comment": {
        "required": [
          "Comments"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 13",
            "format": "int32",
            "readOnly": true
          },
          "CommentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Comments": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "LastModifiedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "None",
              "Details",
              "Comment",
              "Resolution",
              "KeyLinks"
            ],
            "type": "string",
            "nullable": true
          },
          "Promoted": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Company": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 10",
            "format": "int32",
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "TypeOfCompanyID": {
            "type": "integer",
            "description": "Lookup List Section 4",
            "format": "int32",
            "nullable": true
          },
          "TypeOfCompany": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeOfBusiness": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "IncorpPlaceName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "IncorpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "YearsInBusiness": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "LicenseInfo": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "BankingInfo": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "NumberOfEmployees": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentWrkAsGC": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentWrkAsSC": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "MaxContractValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "MaxContractPeriod": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AvgAnnualWorkValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "InLitigationNow": {
            "type": "boolean",
            "nullable": true
          },
          "LitigationInfo": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsBondable": {
            "type": "boolean",
            "nullable": true
          },
          "BondingCapacity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BondingCompany": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "IsUnion": {
            "type": "boolean",
            "nullable": true
          },
          "IsOpenShop": {
            "type": "boolean",
            "nullable": true
          },
          "IsPrevailingWage": {
            "type": "boolean",
            "nullable": true
          },
          "IsOtherLabType": {
            "type": "boolean",
            "nullable": true
          },
          "OtherLabType": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "InNatUnionAgreement": {
            "type": "boolean",
            "nullable": true
          },
          "InLocUnionAgreement": {
            "type": "boolean",
            "nullable": true
          },
          "UnionInfo": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsWBE": {
            "type": "boolean",
            "nullable": true
          },
          "IsMBE": {
            "type": "boolean",
            "nullable": true
          },
          "IsDBE": {
            "type": "boolean",
            "nullable": true
          },
          "IsVBE": {
            "type": "boolean",
            "nullable": true
          },
          "IsSBE": {
            "type": "boolean",
            "nullable": true
          },
          "IsState": {
            "type": "boolean",
            "nullable": true
          },
          "IsFederal": {
            "type": "boolean",
            "nullable": true
          },
          "IsOtherClass": {
            "type": "boolean",
            "nullable": true
          },
          "OtherClass": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "ClassCertifiedBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "DunBradNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "DunBradRate": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "InternalRating": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "InsuranceContact": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "InsuranceTel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Trade": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SpecSection": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "DivisionID": {
            "type": "integer",
            "description": "Lookup List Section 128",
            "format": "int32",
            "nullable": true
          },
          "Division": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FederalID": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "InfoSuppliedBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "InfoSuppliedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "InfoSuppliedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "WorkUsuallySubedOut": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Principals": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Owners": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Subsidiaries": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "NumLostWrkDaysLastYr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NumLostWrkDaysAveLast5Yr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NumMedTreatLastYr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NumMedTreatAveLast5Yr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NumFatalitiesLastYr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "NumFatalitiesAveLast5Yr": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "SafetyRecComments": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "AliasID": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "AliasSystem": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ERPCustomerOrVendorId": {
            "type": "integer",
            "description": "The ERP Customer or Vendor Id",
            "format": "int32",
            "readOnly": true
          },
          "ERPCustomerOrVendorCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The ERP Customer or Vendor Code",
            "nullable": true,
            "readOnly": true
          },
          "ERPCustomerOrVendorName": {
            "maxLength": 100,
            "type": "string",
            "description": "The ERP Customer or Vendor Name",
            "nullable": true,
            "readOnly": true
          },
          "ERPCustomerOrVendorType": {
            "type": "integer",
            "description": "The ERP Customer or Vendor Type. 1 = Customer, 2 = Vendor",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "nullable": true
          },
          "Crews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Crew"
            },
            "nullable": true
          },
          "Contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Contact"
            },
            "nullable": true
          },
          "InsuranceRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Insurance"
            },
            "nullable": true
          },
          "DivisionsOfWork": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DivisionOfWork"
            },
            "nullable": true
          },
          "RegionsOfWork": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegionOfWork"
            },
            "nullable": true
          },
          "TypesOfWork": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeOfWork"
            },
            "nullable": true
          },
          "WorkHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkHistory"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Contact": {
        "required": [
          "AddressID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 18",
            "format": "int32",
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "AddressID": {
            "type": "integer",
            "format": "int32"
          },
          "DisplayName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PrefixID": {
            "type": "integer",
            "description": "Lookup List Section 28",
            "format": "int32",
            "nullable": true
          },
          "Prefix": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FirstName": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "MiddleName": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "maxLength": 25,
            "type": "string",
            "nullable": true
          },
          "Initials": {
            "maxLength": 10,
            "type": "string",
            "nullable": true
          },
          "Title": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Tel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Fax": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Cel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "HomeTel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "EMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsMainContact": {
            "type": "boolean",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "nullable": true
          },
          "PortfolioRoleID": {
            "type": "integer",
            "description": "Lookup List Section 48",
            "format": "int32",
            "nullable": true
          },
          "PortfolioRole": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CrewID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CrewName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TradeID": {
            "type": "integer",
            "description": "Lookup List Section 158",
            "format": "int32",
            "nullable": true
          },
          "Trade": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ClassID": {
            "type": "integer",
            "description": "Lookup List Section 115",
            "format": "int32",
            "nullable": true
          },
          "Class": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Contract": {
        "required": [
          "AuthorContactID",
          "ContractNumber",
          "Description",
          "RulesCode",
          "ToCompanyID",
          "TypeID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 5",
            "format": "int32",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "TypeID": {
            "type": "integer",
            "format": "int32"
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsCommit": {
            "type": "boolean",
            "readOnly": true
          },
          "RulesCode": {
            "enum": [
              "None",
              "ControlledTotal",
              "UncontrolledTotal",
              "VariableTotal",
              "UncontrolledWithFixedCap"
            ],
            "type": "string"
          },
          "IsUnitPrice": {
            "type": "boolean",
            "nullable": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SpecSection": {
            "maxLength": 200,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Addenda": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Exhibits": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "ScopeOfWork": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "GeneralRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StoredMatRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginalValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChangeValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RevisedValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PotentialChangeValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PotentialValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "FirstWitness": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "SecondWitness": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "SignBlockComments": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "RequiredDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ContractDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "IssuedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ExecutedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "NTP": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualStart": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "OrigSubstComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DaysToFinal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OrigFinalComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "CurrentSubstComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "CurrentFinalComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ActualSubstComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualFinalComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "PercentDBE": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentMBE": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentWBE": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentVBE": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentSBE": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WorkCompRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "MatStoredRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BidBond": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "PaymentBond": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "PerformBond": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "BidPackageNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPStatusMessage": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ERPCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractClarifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractClarification"
            },
            "nullable": true
          },
          "ContractSchedOfValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractSchedOfValues"
            },
            "nullable": true
          },
          "ContractPrimeContractCOLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPrimeContractCOLink"
            },
            "nullable": true
          },
          "ContractSubcontractCOLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractSubcontractCOLink"
            },
            "nullable": true
          },
          "ContractPCOItemLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPCOItemLink"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ContractClarification": {
        "required": [
          "ItemNumber",
          "TypeID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 143",
            "format": "int32",
            "readOnly": true
          },
          "ClarificationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 15",
            "format": "int32"
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ContractInvoice": {
        "required": [
          "AuthorContactID",
          "ContractID",
          "InvoiceDate",
          "InvoiceNumber",
          "PeriodID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 6",
            "format": "int32",
            "readOnly": true
          },
          "ContractInvoiceID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32"
          },
          "ContractNumberAndDescription": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The Contract's ContractNumber and Description combined",
            "nullable": true,
            "readOnly": true
          },
          "InvoiceNumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Sequence": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "PeriodID": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "InvoiceDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "ApprovedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "PaidDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 119",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ChgsAddPrevPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsDdtPrevPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsAddThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChgsDdtThisPeriod": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ChangesToDate": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RevisedContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleted": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalLessRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PreviousTotalLessRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentDue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToInvoice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "WorkCompRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "MatStoredRetainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsIncludeInPayApp": {
            "type": "boolean",
            "nullable": true
          },
          "PayAppContractID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PayAppContract": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "IsLockedByCI": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "OriginalContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentContractValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractInvoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractInvoiceItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ContractInvoiceItem": {
        "required": [
          "Description",
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 7",
            "format": "int32",
            "readOnly": true
          },
          "ConInvItemId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContractInvoiceID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 154",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduledQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduledValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PreviousQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevWorkMatInstallValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ThisInvoiceQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WorkThisInvoiceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "MatInstallThisInvoiceValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StoredMaterialValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PrevStoredMaterialValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleteQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevTotalCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetCurrentDue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PercentComplete": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToCompleteQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BalanceToCompleteValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalWorkMatInstallValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "GeneralRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "GeneralRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "StoredMatRetainPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StoredMatRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PrevTotalRetainValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ScheduledHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PrevExpendedHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ThisInvoiceHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalExpendedHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "SofVItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCOItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCOItemNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "SCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ContractPCOItemLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 43",
            "format": "int32",
            "readOnly": true
          },
          "PCOItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CostAppliedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostAllocationCode": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ContractPrimeContractCOLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 148",
            "format": "int32",
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PCCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ContractSchedOfValues": {
        "required": [
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 74",
            "format": "int32",
            "readOnly": true
          },
          "SofVItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeID": {
            "type": "integer",
            "description": "Lookup List Section 130",
            "format": "int32",
            "nullable": true
          },
          "RevenueCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeCode": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueCodeDescription": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ScheduledQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduledValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Notes": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SpecSection": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "MaterialCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ScheduledHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "InvoicedAmt": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Retainage": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsLockedByCIItem": {
            "type": "boolean",
            "readOnly": true
          },
          "ForecastStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastFinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastAllocType": {
            "enum": [
              "None",
              "BellCurve",
              "FrontLoad",
              "BackLoad",
              "Linear",
              "Plug"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ContractSubcontractCOLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 147",
            "format": "int32",
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "SCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ContractType": {
        "type": "object",
        "properties": {
          "TypeID": {
            "type": "integer",
            "format": "int32"
          },
          "IsCommit": {
            "type": "boolean"
          },
          "Description": {
            "type": "string",
            "description": "The description of the item",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "CourtesyCopy": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 14",
            "format": "int32",
            "readOnly": true
          },
          "AssigneeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactEMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Crew": {
        "required": [
          "CrewName",
          "DefaultUOM"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 163",
            "format": "int32",
            "readOnly": true
          },
          "CrewID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CrewName": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "DefaultUOM": {
            "enum": [
              "None",
              "Hours",
              "Days"
            ],
            "type": "string"
          },
          "DefaultManHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "DefaultManDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "HoursPerDay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsDefault": {
            "type": "boolean",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "BreakTime": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "FinishTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "Workers": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "DailyReport": {
        "required": [
          "Date",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 38",
            "format": "int32",
            "readOnly": true
          },
          "DailyReportID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "WeatherUOM": {
            "enum": [
              "None",
              "Imperial",
              "Metric"
            ],
            "type": "string",
            "readOnly": true
          },
          "TotalSnowfall": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalRainfall": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalRainfallUnlocked": {
            "type": "boolean",
            "nullable": true
          },
          "LostProductivityUOM": {
            "enum": [
              "None",
              "Hours",
              "Days"
            ],
            "type": "string",
            "nullable": true
          },
          "LostProductivity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WeatherNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "TotalWorkApproved": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalLaborFileLinks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TotalWorkUnapproved": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalWorkersApproved": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalWorkersUnapproved": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalComments": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TotalLinks": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TotalEquipmentRecords": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TotalEquipmentQty": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalEquipmentHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DailyWorks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailyWork"
            },
            "nullable": true
          },
          "EquipmentRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Equipment"
            },
            "nullable": true
          },
          "Weathers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Weather"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "DailyWork": {
        "required": [
          "CompanyID",
          "CrewID",
          "StatusID",
          "UOM"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 39",
            "format": "int32",
            "readOnly": true
          },
          "DailyWorkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DailyReportID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CrewID": {
            "type": "integer",
            "format": "int32"
          },
          "CrewName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkDescription": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ManpowerQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "HoursPerDay": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UOM": {
            "enum": [
              "None",
              "Hours",
              "Days"
            ],
            "type": "string"
          },
          "StatusID": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "DetailLevel": {
            "enum": [
              "Basic",
              "BasicWithWorkers",
              "Detailed"
            ],
            "type": "string",
            "readOnly": true
          },
          "Workers": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "format": "date-span",
            "readOnly": true
          },
          "BreakTime": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "FinishTime": {
            "type": "string",
            "format": "date-span",
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "Read-only description for LocationID",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LaborDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LaborDetail"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "DivisionOfWork": {
        "required": [
          "SpecSectionID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 19",
            "format": "int32",
            "readOnly": true
          },
          "DivOfWorkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32"
          },
          "DisplayValue": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Drawing": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "GroupID",
          "Number",
          "PublishAs",
          "RevisionDate",
          "RevisionNumber",
          "Title",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 56",
            "format": "int32",
            "readOnly": true
          },
          "DrawingID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DrawingSetID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Number": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "RevisionNumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "RevisionDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "PublishedDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Title": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DisciplineID": {
            "type": "integer",
            "description": "Lookup List Section 127",
            "format": "int32",
            "nullable": true
          },
          "Discipline": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "GroupID": {
            "type": "integer",
            "description": "Lookup List Section 165",
            "format": "int32"
          },
          "Group": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PublishAs": {
            "enum": [
              "None",
              "NewCurrentVersion",
              "NotCurrent",
              "Duplicate",
              "FirstVersion",
              "Published"
            ],
            "type": "string"
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "DrawingDownloadRequest": {
        "type": "object",
        "properties": {
          "ReportID": {
            "type": "integer",
            "description": "The optional report to use",
            "format": "int32",
            "nullable": true
          },
          "PrimaryKeys": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of primary keys to include in the report.",
            "nullable": true
          },
          "EachRecordInItsOwnFile": {
            "type": "boolean",
            "description": "When true, the report output for each requested record will be placed in its own file and the resultant file will be a zip file.\r\nWhen false, all requested records will be placed in a single PDF file."
          },
          "IncludePublicAnnotations": {
            "type": "boolean",
            "description": "True if public annotations are to be included"
          },
          "IncludePrivateAnnotations": {
            "type": "boolean",
            "description": "True if private annotations are to be included"
          },
          "GroupOnFieldName": {
            "type": "string",
            "description": "An optional Drawing property name that should be used to group the drawings (only valid when multiple drawings are selected)",
            "nullable": true
          },
          "AsBuilt": {
            "type": "boolean",
            "description": "True if the output is to be generated for as builts"
          },
          "AsBuiltIncludeRecords": {
            "type": "boolean",
            "description": "True if records that are linked to annotations are to be included in the asbuilt output"
          },
          "AsBuiltIncludeDrawingsModelsAndURLs": {
            "type": "boolean",
            "description": "True if designs, models and URLs that are linked to annotations are to be included in the asbuilt output"
          },
          "AsBuiltIncludeFiles": {
            "type": "boolean",
            "description": "True if files that are linked to annotations are to be included in the asbuilt output"
          }
        },
        "additionalProperties": false,
        "description": "Used to initiate the download of one or more drawings"
      },
      "DrawingSet": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Name",
          "Number",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 53",
            "format": "int32",
            "readOnly": true
          },
          "DrawingSetID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 166",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 167",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultGroupID": {
            "type": "integer",
            "description": "Lookup List Section 165",
            "format": "int32",
            "nullable": true
          },
          "DefaultGroup": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultDisciplineID": {
            "type": "integer",
            "description": "Lookup List Section 127",
            "format": "int32",
            "nullable": true
          },
          "DefaultDiscipline": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultLocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DefaultLocation": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultRevisionDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DefaultDrawingStatusID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DefaultDrawingStatus": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultAuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "DefaultAuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DefaultAuthorContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DefaultAuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Drawings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Drawing"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ERPCompany": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ProjectSight generated id value",
            "format": "int32"
          },
          "ErpCode": {
            "type": "string",
            "description": "The identifier (code) for the Company in the ERP. Unique value provided by Ryvit based on the integrated ERp data.  In Spectrum this is the Company Code.  In Vista, this is a tinyint value converted into a string. In Sage300 this will be a Folder Name.",
            "nullable": true
          },
          "CustomerGroupCode": {
            "type": "string",
            "description": "The customer group code for this company from Vista. For Spectrum, this will be the same as ErpCode",
            "nullable": true
          },
          "VendorGroupCode": {
            "type": "string",
            "description": "The vendor group code for this company from Vista. For Spectrum, this will be the same as ErpCode",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of company.",
            "nullable": true
          },
          "Address1": {
            "type": "string",
            "description": "Address Line 1",
            "nullable": true
          },
          "Address2": {
            "type": "string",
            "description": "Address Line 2",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "State": {
            "type": "string",
            "description": "State",
            "nullable": true
          },
          "Zip": {
            "type": "string",
            "description": "Zip",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "description": "Set to true when the record is deleted in the ERP"
          }
        },
        "additionalProperties": {},
        "description": "Used in the private ERP Controller"
      },
      "ERPCustomerOrVendor": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ProjectSight generated id value",
            "format": "int32"
          },
          "Type": {
            "type": "integer",
            "description": "The type of company. 1 - Vendor, 2 - Customer",
            "format": "int32"
          },
          "GroupCode": {
            "type": "string",
            "description": "The group code for the associated Company from Vista. For Spectrum, this will be the same as Company.ErpCode",
            "nullable": true
          },
          "ErpCode": {
            "type": "string",
            "description": "Unique value provided by Ryvit based on the integrated ERP data.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the customer or vendor",
            "nullable": true
          },
          "SortName": {
            "type": "string",
            "description": "The sort name of the customer or vendor",
            "nullable": true
          },
          "Status": {
            "type": "integer",
            "description": "Primarily for vendor\r\n0 - None, 1 - Active, 2 - Inactive, 3 - Not Used",
            "format": "int32"
          },
          "Address1": {
            "type": "string",
            "description": "Address Line 1",
            "nullable": true
          },
          "Address2": {
            "type": "string",
            "description": "Address Line 2",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "Zip": {
            "type": "string",
            "description": "Postcode/zip",
            "nullable": true
          },
          "State": {
            "type": "string",
            "description": "State",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "Tel": {
            "type": "string",
            "description": "Phone",
            "nullable": true
          },
          "Fax": {
            "type": "string",
            "description": "Fax",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email",
            "nullable": true
          },
          "VendorType": {
            "type": "string",
            "description": "The Vendor Type Just bringing in the values, not sure if we need to use this at this point. User-defined in Vista, not even validated in Spectrum",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "description": "Set to true when the record is deleted in the ERP"
          }
        },
        "additionalProperties": {},
        "description": "Used in the private ERP Controller"
      },
      "ERPProject": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ProjectSight generated id value",
            "format": "int32"
          },
          "CompanyId": {
            "type": "integer",
            "description": "The id from the Companies table",
            "format": "int32"
          },
          "ErpCode": {
            "type": "string",
            "description": "Unique value provided by Ryvit based on the integrated ERP data.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "(required) job description",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "description": "(required) Project state",
            "nullable": true
          },
          "Address1": {
            "type": "string",
            "description": "Address Line 1",
            "nullable": true
          },
          "Address2": {
            "type": "string",
            "description": "Address Line 2",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City",
            "nullable": true
          },
          "State": {
            "type": "string",
            "description": "State",
            "nullable": true
          },
          "Zip": {
            "type": "string",
            "description": "Zip",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "description": "Country",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "description": "Set to true when the record is deleted in the ERP"
          }
        },
        "additionalProperties": {},
        "description": "Used in the private ERP Controller"
      },
      "Equipment": {
        "required": [
          "CompanyID",
          "EquipmentItemID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 41",
            "format": "int32",
            "readOnly": true
          },
          "EquipmentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DailyReportID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "EquipmentItemID": {
            "type": "integer",
            "description": "Lookup List Section 132",
            "format": "int32"
          },
          "EquipmentItem": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CrewID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CrewName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "Read-only description for LocationID",
            "nullable": true,
            "readOnly": true
          },
          "Rate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Hours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TotalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ErrorResult": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "description": "The text of the error message",
            "nullable": true
          },
          "Code": {
            "type": "integer",
            "description": "The associated error code, if any",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This class represents the Error Result to be displayed in response payload for Client Error 4xx"
      },
      "FieldWorkDirective": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 64",
            "format": "int32",
            "readOnly": true
          },
          "FieldWorkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 134",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 135",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "NotToExceedCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "EstCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ActCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "File": {
        "required": [
          "FileID",
          "FileName"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 34",
            "format": "int32",
            "readOnly": true
          },
          "FileID": {
            "type": "integer",
            "format": "int32"
          },
          "FolderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "FileType": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FileSize": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "FileVersionID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FileSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FolderSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Source": {
            "enum": [
              "ProjectSight",
              "TrimbleConnect"
            ],
            "type": "string",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "FileLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 44",
            "format": "int32",
            "readOnly": true
          },
          "FileLinkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "FileVersionID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CommentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IncludeInNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "IsLockedByOthers": {
            "type": "boolean",
            "readOnly": true
          },
          "Source": {
            "enum": [
              "ProjectSight",
              "TrimbleConnect"
            ],
            "type": "string",
            "readOnly": true
          },
          "FileID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FileSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FileType": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ParentID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ParentSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Ordering": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FileLocation": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "RequestedFileName": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Folder": {
        "required": [
          "FolderName"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 33",
            "format": "int32",
            "readOnly": true
          },
          "FolderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ParentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "FolderSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FolderName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "ParentSID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Source": {
            "enum": [
              "ProjectSight",
              "TrimbleConnect"
            ],
            "type": "string",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Forecast": {
        "required": [
          "AuthorContactID",
          "ContractID",
          "Description",
          "FinancialColumn",
          "ForecastBy",
          "ForecastDate",
          "Number",
          "PeriodID",
          "Type",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 150",
            "format": "int32",
            "readOnly": true
          },
          "ForecastID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "Type": {
            "enum": [
              "None",
              "Budget",
              "Contract",
              "Project"
            ],
            "type": "string"
          },
          "FinancialColumn": {
            "enum": [
              "None",
              "OriginalBudget",
              "CurrentBudget",
              "ProjectedBudget",
              "ProjectedCost",
              "ForecastCost"
            ],
            "type": "string"
          },
          "ForecastBy": {
            "enum": [
              "None",
              "Month",
              "Period"
            ],
            "type": "string"
          },
          "ForecastDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "FinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "DateCreated": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 170",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IncludeInChart": {
            "type": "boolean",
            "nullable": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32"
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PeriodID": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TotalValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalCostToDate": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ForecastValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NotEnoughPeriods": {
            "type": "boolean",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ForecastBuckets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastBucket"
            },
            "nullable": true
          },
          "ForecastItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ForecastBucket": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 102",
            "format": "int32",
            "readOnly": true
          },
          "ForecastBucketID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ForecastID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "EndDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "PeriodID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Period": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "BucketKey": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 200,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ForecastItem": {
        "required": [
          "AllocationType"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 151",
            "format": "int32",
            "readOnly": true
          },
          "ForecastItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ForecastID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "SofVItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "SCOItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCCOItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ForecastProjectId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ItemIdentifier": {
            "maxLength": 90,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "FinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ForecastStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "ForecastDuration": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AllocationType": {
            "enum": [
              "None",
              "BellCurve",
              "FrontLoad",
              "BackLoad",
              "Linear",
              "Plug"
            ],
            "type": "string"
          },
          "PlugToBucketKey": {
            "maxLength": 20,
            "type": "string",
            "nullable": true
          },
          "PlugToDateValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CurrentValue": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ValueRemaining": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PlugValueRemaining": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ActualCostToDate": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ForecastItemDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ForecastItemDetail"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ForecastItemDetail": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 152",
            "format": "int32",
            "readOnly": true
          },
          "ForecastItemDetailID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ForecastItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "BucketKey": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ForecastToCompleteItem": {
        "required": [
          "UOMID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 124",
            "format": "int32",
            "readOnly": true
          },
          "BudgetForecastToCompleteItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "UOMID": {
            "type": "integer",
            "description": "Lookup List Section 103",
            "format": "int32"
          },
          "UOM": {
            "maxLength": 150,
            "type": "string",
            "description": "The actual display field for the UOM. It is a combination of the code and description, if available.",
            "nullable": true,
            "readOnly": true
          },
          "UOMCode": {
            "maxLength": 30,
            "type": "string",
            "description": "The Code for the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The Description of the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMIsUnitPrice": {
            "type": "boolean",
            "description": "The Unit Price flag from the lookup list.",
            "readOnly": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "description": "Amount divided by Quantity.",
            "format": "double",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "GeneralInvoice": {
        "required": [
          "AuthorContactID",
          "Description",
          "FromCompanyID",
          "InvoiceDate",
          "InvoiceNumber",
          "PeriodID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 71",
            "format": "int32",
            "readOnly": true
          },
          "GenInvID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "InvoiceNumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "POID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PONumber": {
            "maxLength": 308,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "InvoiceDate": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DueDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DatePaid": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "PeriodID": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "maxLength": 10,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 137",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "InvoiceTotal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TaxableAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TaxRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TaxTotal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsItemsInclTax": {
            "type": "boolean",
            "nullable": true
          },
          "TaxBdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TaxBdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsIncludeInPayApp": {
            "type": "boolean",
            "nullable": true
          },
          "PayAppContractID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PayAppContract": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PayAppSumDescID": {
            "type": "integer",
            "description": "Lookup List Section 14",
            "format": "int32",
            "nullable": true
          },
          "PayAppSumDesc": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "POTotalOriginal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "description": "POTotalOriginal - POTotalThisInvoice",
            "format": "double",
            "readOnly": true
          },
          "InvoiceQuantity": {
            "type": "number",
            "description": "Sum of GeneralInvoiceItem Quantity, whether or not the GeneralInvoiceItem is linked to a PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "POQuantityOriginal": {
            "type": "number",
            "description": "Sum of GeneralInvoiceItem POQuantity",
            "format": "double",
            "readOnly": true
          },
          "QuantityBalance": {
            "type": "number",
            "description": "POQuantityOriginal - POQuantityThisInvoice",
            "format": "double",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "GeneralInvoiceItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralInvoiceItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "GeneralInvoiceItem": {
        "required": [
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 72",
            "format": "int32",
            "readOnly": true
          },
          "GenInvItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GenInvID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Item": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Subtotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IsTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "Override": {
            "type": "boolean",
            "description": "When enabled Quantity, UnitPrice, and subtotal will not be automatically recalculated",
            "nullable": true
          },
          "POItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "POItemNumber": {
            "maxLength": 308,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "POSubtotal": {
            "type": "number",
            "description": "The Balance from the linked PurchaseOrderItem at the time the PurchaseOrderItem was used to create this record",
            "format": "double",
            "readOnly": true
          },
          "CurrentPOSubTotal": {
            "type": "number",
            "description": "The current balance from the linked PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "POIsTaxable": {
            "type": "boolean",
            "description": "The IsTaxable flag from the linked PurchaseOrderItem at the time the PurchaseOrderItem was used to create this record",
            "readOnly": true
          },
          "POTaxAmount": {
            "type": "number",
            "description": "The calculated tax amount from the linked PurchaseOrderItem at the time the PurchaseOrderItem was used to create this record. If POIsTaxable is set, then the POSubtotal * TaxRate from the PurchaseOrder",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "description": "If this item is linked to a PurchaseOrderItem, the POSubtotal - Subtotal",
            "format": "double",
            "readOnly": true
          },
          "POQuantity": {
            "type": "number",
            "description": "The QuantityBalance from the linked PurchaseOrderItem at the time the PurchaseOrderItem was used to create this record",
            "format": "double",
            "readOnly": true
          },
          "CurrentPOQuantity": {
            "type": "number",
            "description": "The current QuantityBalance from the linked PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "CurrentPOUnitPrice": {
            "type": "number",
            "description": "The current UnitPrice from the linked PurchaseOrderItem",
            "format": "double",
            "readOnly": true
          },
          "QuantityBalance": {
            "type": "number",
            "description": "If this item is linked to a PurchaseOrderItem, the POQuantity - Quantity",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Insurance": {
        "required": [
          "PolicyName"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 16",
            "format": "int32",
            "readOnly": true
          },
          "InsuranceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PolicyName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "PolicyNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "ReceivedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ExpireDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Reference": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "Carrier": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Contact": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Telephone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsAlert": {
            "type": "boolean",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Issue": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 75",
            "format": "int32",
            "readOnly": true
          },
          "IssueID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 164",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 163",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsCostImpact": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsSchedImpact": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "Days": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduleNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsDwgUpdateRequired": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "DrawingNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsDwgUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "JobCostItem": {
        "required": [
          "BdgtCodeID",
          "Description",
          "UOMID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 37",
            "format": "int32",
            "readOnly": true
          },
          "JobCostItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "JobCostID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Description": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string"
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32"
          },
          "BdgtCode": {
            "maxLength": 90,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMID": {
            "type": "integer",
            "description": "Lookup List Section 103",
            "format": "int32"
          },
          "UOM": {
            "maxLength": 150,
            "type": "string",
            "description": "The actual display field for the UOM. It is a combination of the code and description, if available.",
            "nullable": true,
            "readOnly": true
          },
          "UOMCode": {
            "maxLength": 30,
            "type": "string",
            "description": "The Code for the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The Description of the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMIsUnitPrice": {
            "type": "boolean",
            "description": "The Unit Price flag from the lookup list.",
            "readOnly": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UnitCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "OriginID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Hours": {
            "type": "number",
            "description": "The actual hours for payroll.",
            "format": "double",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "JobCosts": {
        "required": [
          "Description",
          "Number",
          "Type"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 36",
            "format": "int32",
            "readOnly": true
          },
          "JobCostID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Type": {
            "enum": [
              "None",
              "CommitmentInvoice",
              "Expense",
              "Payroll"
            ],
            "type": "string"
          },
          "Description": {
            "maxLength": 300,
            "minLength": 1,
            "type": "string"
          },
          "Month": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "InvoiceNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ExtCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "OriginID": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "JobCostItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobCostItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "JobCostsBulkUpsertResponse": {
        "type": "object",
        "properties": {
          "Record": {
            "$ref": "#/components/schemas/JobCosts"
          },
          "Success": {
            "type": "boolean",
            "description": "True if the record was successfully added or updated"
          },
          "ErrorMessage": {
            "type": "string",
            "description": "The error message if the record was not successfully added or updated",
            "nullable": true
          },
          "ErrorCode": {
            "type": "integer",
            "description": "The error code, if any, if the record was not successfully added or updated",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Used to return the result of a bulk upsert (update or create) operation"
      },
      "LaborDetail": {
        "required": [
          "ClassID",
          "Name",
          "TradeID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 40",
            "format": "int32",
            "readOnly": true
          },
          "LaborID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DailyWorkID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactEMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Name": {
            "maxLength": 150,
            "minLength": 1,
            "type": "string"
          },
          "StartTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "BreakTime": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "FinishTime": {
            "type": "string",
            "format": "date-span",
            "nullable": true
          },
          "TradeID": {
            "type": "integer",
            "description": "Lookup List Section 158",
            "format": "int32"
          },
          "Trade": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ClassID": {
            "type": "integer",
            "description": "Lookup List Section 115",
            "format": "int32"
          },
          "Class": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ManpowerQty": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {},
        "description": "Only Ad-Hoc records may be created. An Ad-Hoc record is one that has Name specified, not ContactID."
      },
      "Location": {
        "type": "object",
        "properties": {
          "RecordId": {
            "type": "integer",
            "format": "int32"
          },
          "ParentID": {
            "type": "integer",
            "description": "LocationID of parent location",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "The description of the item",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "LookupListItem": {
        "required": [
          "Description"
        ],
        "type": "object",
        "properties": {
          "LookupListID": {
            "type": "integer",
            "description": "The record's primary key",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the item"
          },
          "ProjectID": {
            "type": "integer",
            "description": "The record's project primary key",
            "format": "int32"
          },
          "LastModified": {
            "type": "string",
            "description": "The Date/Time the record was last modified",
            "format": "date-time"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database\r\nThis will be ignored on update."
          }
        },
        "additionalProperties": {},
        "description": "Lookup List Entry"
      },
      "LookupListItemEquipment": {
        "required": [
          "Description"
        ],
        "type": "object",
        "properties": {
          "Rate": {
            "type": "number",
            "description": "The rate for the Equipment",
            "format": "double"
          },
          "LookupListID": {
            "type": "integer",
            "description": "The record's primary key",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "The description of the item"
          },
          "ProjectID": {
            "type": "integer",
            "description": "The record's project primary key",
            "format": "int32"
          },
          "LastModified": {
            "type": "string",
            "description": "The Date/Time the record was last modified",
            "format": "date-time"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database\r\nThis will be ignored on update."
          }
        },
        "additionalProperties": {},
        "description": "Represents one Equipment lookup entry"
      },
      "LookupListType": {
        "type": "object",
        "properties": {
          "Section": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "Meeting": {
        "required": [
          "AuthorContactID",
          "Date",
          "EndTime",
          "LocationID",
          "MeetingNameID",
          "Purpose",
          "StartTime",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 4",
            "format": "int32",
            "readOnly": true
          },
          "MeetingID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "MeetingNameID": {
            "type": "integer",
            "description": "Lookup List Section 11",
            "format": "int32"
          },
          "MeetingName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "StartTime": {
            "type": "string",
            "format": "date-span"
          },
          "EndTime": {
            "type": "string",
            "format": "date-span"
          },
          "Purpose": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "LocationID": {
            "type": "integer",
            "description": "Lookup List Section 13",
            "format": "int32"
          },
          "Location": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "MeetingAttendees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingAttendee"
            },
            "nullable": true
          },
          "MeetingItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "MeetingAttendee": {
        "required": [
          "ContactID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 81",
            "format": "int32",
            "readOnly": true
          },
          "MeetingAttendeeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MeetingID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32"
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Status": {
            "enum": [
              "None",
              "Invited",
              "Present",
              "Absent"
            ],
            "type": "string",
            "nullable": true
          },
          "InvitationSent": {
            "type": "boolean",
            "readOnly": true
          },
          "ContactEMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "MeetingItem": {
        "required": [
          "DateCreated",
          "Description",
          "ItemNumber",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 80",
            "format": "int32",
            "readOnly": true
          },
          "MeetingItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MeetingID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ResponsibleCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResponsibleCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TopicID": {
            "type": "integer",
            "description": "Lookup List Section 12",
            "format": "int32",
            "nullable": true
          },
          "Topic": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 7",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "IsClosed": {
            "type": "boolean",
            "readOnly": true
          },
          "IsOldBusiness": {
            "type": "boolean",
            "readOnly": true
          },
          "FromMeetingItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromMeetingID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FromItemNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "OriginatedFromMeeting": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MeetingItemActionItemLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeetingItemActionItemLink"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "MeetingItemActionItemLink": {
        "required": [
          "ActionItemID",
          "DateCreated",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 82",
            "format": "int32",
            "readOnly": true
          },
          "LinkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "MeetingItemID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ActionItemID": {
            "type": "integer",
            "format": "int32"
          },
          "Number": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 138",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Notice": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 67",
            "format": "int32",
            "readOnly": true
          },
          "NoticeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 144",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 162",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "POCatalog": {
        "required": [
          "Code"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 157",
            "format": "int32",
            "readOnly": true
          },
          "POCatalogID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Code": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Notes": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "PeriodRecord": {
        "type": "object",
        "properties": {
          "PeriodID": {
            "type": "integer",
            "format": "int32"
          },
          "Period": {
            "type": "string",
            "nullable": true
          },
          "FromDate": {
            "type": "string",
            "format": "date-time"
          },
          "ToDate": {
            "type": "string",
            "format": "date-time"
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "IsCurrent": {
            "type": "boolean"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "Portfolio": {
        "required": [
          "AccountID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 32",
            "format": "int32",
            "readOnly": true
          },
          "PortfolioID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Name": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string"
          },
          "LastActivityDate": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Disabled": {
            "type": "boolean",
            "description": "This will be set to true if the Portfolio has been disabled",
            "readOnly": true
          },
          "IsOnline": {
            "type": "boolean",
            "description": "This will be set to true if the Portfolio is online",
            "readOnly": true
          },
          "IsAvailable": {
            "type": "boolean",
            "readOnly": true
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "TCAsFMS": {
            "type": "boolean",
            "readOnly": true
          },
          "TCToDos": {
            "type": "boolean",
            "readOnly": true
          },
          "AIAssistant": {
            "type": "boolean",
            "readOnly": true
          },
          "ContactSearchLimitToProject": {
            "type": "boolean",
            "readOnly": true
          },
          "AccountID": {
            "type": "integer",
            "format": "int32"
          },
          "PortfolioERPUrl": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AccountERPUrl": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AccountName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AccountType": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ERPLinkType": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ERPCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ERPCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "PortfolioCopyFromTemplateRequest": {
        "required": [
          "Name",
          "TemplatePortfolioID"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Portfolio"
          },
          "TemplatePortfolioID": {
            "type": "string",
            "description": "The primary key of the Portfolio the new Portfolio is to be copied from.",
            "format": "uuid"
          },
          "CopySettings": {
            "type": "boolean",
            "description": "Should Portfolio Settings be copied from the template Portfolio?"
          },
          "CopyUsers": {
            "type": "boolean",
            "description": "Should Users be copied from the template Portfolio?\r\nIf Users are being copied SecurityRoles and Companies will also be copied."
          },
          "CopySecurityRoles": {
            "type": "boolean",
            "description": "Should Security Roles be copied from the template Portfolio?\r\nAlways true if CopyUsers is true\r\n///"
          },
          "CopyCompanies": {
            "type": "boolean",
            "description": "Should Companies be copied from the template Portfolio?\r\nAlways true if CopyUsers is true"
          }
        },
        "additionalProperties": {},
        "description": "Used to accept parameters used in creating a new Portfolio from a template"
      },
      "PortfolioCreateRequest": {
        "required": [
          "AccountID",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Portfolio"
          },
          "AccountID": {
            "type": "integer",
            "description": "The primary key of the Account the Portfolio is to be created in.",
            "format": "int32"
          }
        },
        "additionalProperties": {},
        "description": "Used to accept parameters used in creating a new Portfolio"
      },
      "PotentialCO": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Description",
          "PCONumber",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 1",
            "format": "int32",
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 146",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ReasonID": {
            "type": "integer",
            "description": "Lookup List Section 147",
            "format": "int32",
            "nullable": true
          },
          "Reason": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "BdgtEstimatedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BdgtProposedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BdgtApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "BdgtAppliedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostEstimatedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostProposedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostAppliedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RequestedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CORequestID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CORNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "RevenueAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "PCCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 3",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPStatusMessage": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ERPCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PotentialCOItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PotentialCOItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PotentialCOItem": {
        "required": [
          "BdgtAllocationCode",
          "CostAllocationCode",
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 2",
            "format": "int32",
            "readOnly": true
          },
          "PCOItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "BdgtOriginalEstimate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtOriginalQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtOriginalUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtProposedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtProposedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtProposedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtApprovedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtApprovedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtApprovedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtAppliedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtAppliedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtAppliedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtAppliedHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BdgtAllocationCode": {
            "enum": [
              "None",
              "ItemCancelled",
              "NoBudgetAllocation",
              "ApprovedRevisions",
              "PendingRevisions",
              "ApproximateRevisions"
            ],
            "type": "string"
          },
          "CostOriginalEstimate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostOriginalQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostOriginalUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostProposedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostProposedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostProposedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostApprovedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostApprovedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostApprovedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostAppliedAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostAppliedQuantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostAppliedUnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostAppliedHours": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostAllocationCode": {
            "enum": [
              "None",
              "AddToPendingCommitment",
              "AddToApproximateCommitment",
              "AddToUncommittedCost",
              "UseUncommittedCostsPending",
              "UseUncommittedCostsApproximate",
              "NoCostAllocation",
              "ItemCancelled",
              "LinkedNone",
              "LinkedAddToPendingCommitment",
              "LinkedAddToApproximateCommitment",
              "LinkedAddToUncommittedCost",
              "LinkedUseUncommittedCostsPending",
              "LinkedUseUncommittedCostsApproximate",
              "LinkedNoCostAllocation"
            ],
            "type": "string"
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueIncluded": {
            "type": "boolean",
            "nullable": true
          },
          "RevenueMarkupPercent": {
            "type": "number",
            "description": "If RevenueIncluded, (1 - (BdgtAppliedAmount + RevenueMarkupAmount / BdgtAppliedAmount)) * 100, otherwise 0, If RevenueMarkupAmount is set to 0 and RevenueMarkupPercent is not, RevenueMarkupAmount will be automatically calculated.",
            "format": "double",
            "nullable": true
          },
          "RevenueAmount": {
            "type": "number",
            "description": "BdgtAppliedAmount + RevenueMarkupAmount",
            "format": "double",
            "readOnly": true
          },
          "RevenueMarkupAmount": {
            "type": "number",
            "description": "If RevenueIncluded, BdgtAppliedAmount * RevenueMarkupPercent, otherwise 0, If RevenueMarkupPercent is set to 0 and RevenueMarkupAmount is not, RevenueMarkupPercent will be automatically calculated.",
            "format": "double",
            "nullable": true
          },
          "RevenueContractItem": {
            "maxLength": 564,
            "type": "string",
            "description": "Based on SofVItemId associated with selected budget code: [Contract.Number]-[ContractSchedOfValues.ItemNumber] - [ContractSchedOfValues.Description]",
            "nullable": true,
            "readOnly": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ChangeOrderName": {
            "maxLength": 61,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLockedBySCO": {
            "type": "boolean",
            "readOnly": true
          },
          "InvoicedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PrimeContractCO": {
        "required": [
          "AuthorContactID",
          "ContractID",
          "Date",
          "Description",
          "PCCONumber",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 158",
            "format": "int32",
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32"
          },
          "ContractNumberAndDescription": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The Contract's ContractNumber and Description combined",
            "nullable": true,
            "readOnly": true
          },
          "PCCONumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Sequence": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "NTPDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ExecutedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 145",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "SubstantialComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "NetPrevApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetPrevApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsLockedByPCCO": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPStatusMessage": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ERPCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PrimeContractCOPCOLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrimeContractCOPCOLink"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PrimeContractCOPCOLink": {
        "required": [
          "PCOID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 159",
            "format": "int32",
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32"
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RevenueAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "RequestedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Project": {
        "required": [
          "CompanyID",
          "Name",
          "Sequence",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 99",
            "format": "int32",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "Address": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "PrefixID": {
            "type": "integer",
            "description": "Lookup List Section 149",
            "format": "int32",
            "nullable": true
          },
          "Prefix": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Sequence": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "SuffixID": {
            "type": "integer",
            "description": "Lookup List Section 156",
            "format": "int32",
            "nullable": true
          },
          "Suffix": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Number": {
            "maxLength": 52,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "JobTel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "JobFax": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "FinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ProjectExecutiveCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ProjectExecutiveID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectExecutive": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectManagerCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ProjectManagerID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectManager": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectArchitectCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ProjectArchitectID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectArchitect": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ConstructionManagerCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ConstructionManagerID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ConstructionManager": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SuperintendentCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "SuperintendentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Superintendent": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FieldEngineerCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "FieldEngineerID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FieldEngineer": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "GeneralNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "TypeOfContractID": {
            "type": "integer",
            "description": "Lookup List Section 6",
            "format": "int32",
            "nullable": true
          },
          "TypeOfContract": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeOfBuildingID": {
            "type": "integer",
            "description": "Lookup List Section 25",
            "format": "int32",
            "nullable": true
          },
          "TypeOfBuilding": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeOfConstructionID": {
            "type": "integer",
            "description": "Lookup List Section 5",
            "format": "int32",
            "nullable": true
          },
          "TypeOfConstruction": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CountryID": {
            "type": "integer",
            "description": "Lookup List Section 23",
            "format": "int32",
            "nullable": true
          },
          "Country": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "StateID": {
            "type": "integer",
            "description": "Lookup List Section 21",
            "format": "int32",
            "nullable": true
          },
          "State": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TerritoryID": {
            "type": "integer",
            "description": "Lookup List Section 22",
            "format": "int32",
            "nullable": true
          },
          "Territory": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RegionID": {
            "type": "integer",
            "description": "Lookup List Section 24",
            "format": "int32",
            "nullable": true
          },
          "Region": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ForecastStartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastFinishDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ForecastAllocType": {
            "enum": [
              "None",
              "BellCurve",
              "FrontLoad",
              "BackLoad",
              "Linear",
              "Plug"
            ],
            "type": "string",
            "nullable": true
          },
          "Owner": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "OwnerAddr1": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "OwnerAddr2": {
            "maxLength": 75,
            "type": "string",
            "nullable": true
          },
          "OwnerBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "OwnerJobNum": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "ContrName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ContrAddr1": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ContrAddr2": {
            "maxLength": 75,
            "type": "string",
            "nullable": true
          },
          "ContrBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ContrJobNum": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "ArchName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ArchAddr1": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "ArchAddr2": {
            "maxLength": 75,
            "type": "string",
            "nullable": true
          },
          "ArchBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ArchJobNum": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "ContractDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ContractFor": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "NotaryName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "NotaryStateOf": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "NotaryCountyOf": {
            "maxLength": 30,
            "type": "string",
            "nullable": true
          },
          "NotaryExpires": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "TrimbleConnectProjectID": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectProjectName": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectFolderID": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectFolderName": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectFolderPath": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectRootFolderID": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrimbleConnectRootFolderPath": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TCMigrationError": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TCMigratedFileCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TCTotalFileCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "TCAsFMS": {
            "type": "boolean",
            "readOnly": true
          },
          "TCMigrationInProgress": {
            "type": "boolean",
            "readOnly": true
          },
          "TCMigrationMergeGroups": {
            "type": "boolean",
            "readOnly": true
          },
          "ERPProjectId": {
            "type": "integer",
            "description": "The ERP Project Id",
            "format": "int32",
            "readOnly": true
          },
          "UnicodeTimeZone": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Connect2FabFolderID": {
            "maxLength": 50,
            "type": "string",
            "description": "The Trimble Connect Folder ID for Connect2Fab integration, specifically used for ProjectMEP projects that are launched from Projectsight",
            "nullable": true,
            "readOnly": true
          },
          "Connect2FabFolderName": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "The Trimble Connect Folder Name for Connect2Fab integration, specifically used for ProjectMEP projects that are launched from Projectsight",
            "nullable": true,
            "readOnly": true
          },
          "Connect2FabFolderPath": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "The Trimble Connect Folder Path for Connect2Fab integration, specifically used for ProjectMEP projects that are launched from Projectsight",
            "nullable": true,
            "readOnly": true
          },
          "WindowsTimeZone": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastActivityDate": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectContactLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectContactLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ProjectContactLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 101",
            "format": "int32",
            "readOnly": true
          },
          "CompProjID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IsMainProjectContact": {
            "type": "boolean",
            "nullable": true
          },
          "ProjectRoleID": {
            "type": "integer",
            "description": "Lookup List Section 47",
            "format": "int32",
            "nullable": true
          },
          "ProjectRole": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DisplayName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DisplayAddress": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Tel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Cel": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "EMail": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ProjectCreateRequest": {
        "type": "object",
        "properties": {
          "CopyFromProjectID": {
            "type": "integer",
            "description": "The projectid, if any, to copy settings from after the project is created",
            "format": "int32"
          },
          "CopyAllProjectSettings": {
            "type": "boolean",
            "description": "When true, all project settings will be copied from the specified project and the individual flags other than CopyFileLibraryFolders and CopyUsers will be ignored."
          },
          "CopyFileLibraryFolders": {
            "type": "boolean",
            "description": "When true, any project-specific file library folders and permissions will be copied from the specified project"
          },
          "CopyUsers": {
            "type": "boolean",
            "description": "When true, users assigned to the specified project will be automatically assigned to the new project"
          },
          "CopyBudgetCodeStructure": {
            "type": "boolean",
            "description": "When true, any project-specific budget code structure will be copied if a CopyFromProjectID is specified"
          },
          "CopyBudgetGroups": {
            "type": "boolean",
            "description": "When true, any project-specific budget groups will be copied if a CopyFromProjectID is specified"
          },
          "CopyContractTypes": {
            "type": "boolean",
            "description": "When true, any project-specific contract types will be copied if a CopyFromProjectID is specified"
          },
          "CopyCSICodes": {
            "type": "boolean",
            "description": "When true, any project-specific CSI Codes (spec sections) will be copied if a CopyFromProjectID is specified"
          },
          "CopyDistributionLists": {
            "type": "boolean",
            "description": "When true, any project-specific distribution lists will be copied if a CopyFromProjectID is specified"
          },
          "CopyFeatureFlags": {
            "type": "boolean",
            "description": "When true, any project-specific budget code structure will be copied if a CopyFromProjectID is specified"
          },
          "CopyLocations": {
            "type": "boolean",
            "description": "When true, any project-specific locations will be copied if a CopyFromProjectID is specified"
          },
          "CopyLookupLists": {
            "type": "boolean",
            "description": "When true, any project-specific lookup lists will be copied if a CopyFromProjectID is specified"
          },
          "CopyNomenclature": {
            "type": "boolean",
            "description": "When true, any project-specific nomenclature will be copied if a CopyFromProjectID is specified"
          },
          "CopyPeriods": {
            "type": "boolean",
            "description": "When true, any project-specific periods will be copied if a CopyFromProjectID is specified"
          },
          "CopyPCOMarkups": {
            "type": "boolean",
            "description": "When true, any project-specific PCO Markups will be copied if a CopyFromProjectID is specified"
          },
          "CopyProjectPictures": {
            "type": "boolean",
            "description": "When true, any project-specific project pictures will be copied if a CopyFromProjectID is specified"
          },
          "CopyPunchListTypicalConditions": {
            "type": "boolean",
            "description": "When true, any project-specific punchlist typical conditions will be copied if a CopyFromProjectID is specified"
          },
          "CopyWorkflowStates": {
            "type": "boolean",
            "description": "When true, any project-specific workflow states will be copied if a CopyFromProjectID is specified"
          },
          "CopyProjectTableSettings": {
            "type": "boolean",
            "description": "When true, any project-specific project table settings will be copied if a CopyFromProjectID is specified"
          },
          "CopyChecklistTemplates": {
            "type": "boolean",
            "description": "When true, any project-specific checklist templates will be copied if a CopyFromProjectID is specified"
          },
          "CopyDefaultAssignees": {
            "type": "boolean",
            "description": "When true, any project-specific default assignees will be copied if a CopyFromProjectID is specified"
          },
          "LicenseForNewTCProject": {
            "type": "string",
            "description": "If a new Trimble Connect project is to be created when this project is created this property will specify the license to be used for the new Trimble Connect Project.\r\nValid values are the Display Name of the license, the Account Id of the license, the license identifier (Guid), or Default.\r\nDefault is only required when the Portfolio that the Project is being created in does not require all new ProjectSight Projects to be linked to a Trimble Connect Project.\r\nIf this is set to a value other than Default, it must be a valid Trimble Connect license accessible to the requesting user.\r\nIf this is not set or set to Default and a new Trimble Connect project is created, the Account associated with the Portfolio the project is being created in must have\r\na Trimble Connect Enterprise License Key set.",
            "nullable": true
          },
          "ExistingTCProjectID": {
            "type": "string",
            "description": "The existing Trimble Connect project ID to link to the new project.",
            "nullable": true
          },
          "Project": {
            "$ref": "#/components/schemas/Project"
          }
        },
        "additionalProperties": {},
        "description": "Used to accept parameters used in creating a new project"
      },
      "ProjectPermission": {
        "required": [
          "GroupID",
          "ProjectID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 28",
            "format": "int32",
            "readOnly": true
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "GroupName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectNumber": {
            "maxLength": 52,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "CanAccess": {
            "type": "boolean",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "ProjectUser": {
        "type": "object",
        "properties": {
          "ID": {
            "type": "integer",
            "description": "The user's ID. Can be set for incoming records",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The user's login. Read-only",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "description": "The default group name for the user. Read-only",
            "nullable": true
          },
          "GroupID": {
            "type": "integer",
            "description": "The default group id for the user. Read-only",
            "format": "int32"
          },
          "ProjectGroupName": {
            "type": "string",
            "description": "The name of the project group the user is assigned to. This will be empty if the user does not have access to the project. Read-only",
            "nullable": true
          },
          "ProjectGroupID": {
            "type": "integer",
            "description": "The id of the group that the user is assigned to for this project. If this value is 0, the user will be denied access to the project.",
            "format": "int32"
          },
          "ContactID": {
            "type": "integer",
            "description": "The user's ContactID. Read-only",
            "format": "int32"
          },
          "ContactName": {
            "type": "string",
            "description": "The user's name. Read-only",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "The name of the company the user belongs to. Read-only",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "description": "The id of the company the user belongs to. Read-only",
            "format": "int32"
          },
          "ErrorMessage": {
            "type": "string",
            "description": "If there are problems updating the user, they will be reported in this property. Read-only",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "A version of the user record that can be easily used in the projects/users endpoint"
      },
      "PunchList": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 49",
            "format": "int32",
            "readOnly": true
          },
          "PunchListID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 159",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 160",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResponsibleCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResponsibleCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PunchListTypicalCondition": {
        "type": "object",
        "properties": {
          "RecordId": {
            "type": "integer",
            "format": "int32"
          },
          "ParentID": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "The description of the item",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "PurchaseOrder": {
        "required": [
          "AuthorContactID",
          "Date",
          "Description",
          "PONumber",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 69",
            "format": "int32",
            "readOnly": true
          },
          "POID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "PONumber": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 148",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ShipToAddress": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Terms": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "SchedDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "FOB": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "DeliveredViaID": {
            "type": "integer",
            "description": "Lookup List Section 8",
            "format": "int32",
            "nullable": true
          },
          "DeliveredVia": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TotalPOAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TaxableAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TaxRate": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "TaxTotal": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TaxInvoiced": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "IsItemsInclTax": {
            "type": "boolean",
            "description": "This field is disabled when this record is linked to a GeneralInvoice and the TaxBdgtCodeID was previously saved",
            "nullable": true
          },
          "TaxBdgtCodeID": {
            "type": "integer",
            "description": "This field is disabled when this record is linked to a GeneralInvoice and the TaxBdgtCodeID was previously saved OR IsItemsInclTax is true",
            "format": "int32",
            "nullable": true
          },
          "TaxBdgtCode": {
            "maxLength": 150,
            "type": "string",
            "description": "This field is disabled when this record is linked to a GeneralInvoice and the TaxBdgtCodeID was previously saved OR IsItemsInclTax is true",
            "nullable": true,
            "readOnly": true
          },
          "InvoicedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "TotalPOQuantity": {
            "type": "number",
            "description": "The sum of all PurchaseOrderItem.Quantity values",
            "format": "double",
            "readOnly": true
          },
          "InvoicedQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "QuantityBalance": {
            "type": "number",
            "description": "TotalPOQuantity - InvoicedQuantity",
            "format": "double",
            "readOnly": true
          },
          "IsOverBillingAllowed": {
            "type": "boolean",
            "nullable": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPStatusMessage": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ERPCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PurchaseOrderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseOrderItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "PurchaseOrderItem": {
        "required": [
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 70",
            "format": "int32",
            "readOnly": true
          },
          "POItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "POID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Item": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Subtotal": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IsTaxable": {
            "type": "boolean",
            "nullable": true
          },
          "InvoicedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Balance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "InvoicedQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "QuantityBalance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "QueryRequest": {
        "type": "object",
        "properties": {
          "Offset": {
            "type": "integer",
            "description": "Number of records to be skipped from the beginning. Only used if Limit is not 0.",
            "format": "int32"
          },
          "Limit": {
            "type": "integer",
            "description": "Number of records to retrieve. If 0, then all records are retrieved",
            "format": "int32"
          },
          "IncludeDeletedRecords": {
            "type": "boolean",
            "description": "True if deleted records are to be included in the results"
          },
          "OnlyIncludeRecordsWithOpenAssignments": {
            "type": "boolean",
            "description": "When true, only records with open assignments will be returned"
          },
          "FilterBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryRequestFilterCondition"
            },
            "description": "The list of conditions to apply to the request",
            "nullable": true
          },
          "OrderBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryRequestSortOrder"
            },
            "description": "The definition of how the response is to be sorted, if at all",
            "nullable": true
          },
          "ProjectIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of projects to include. If empty, all projects the user has access to will be included.",
            "nullable": true
          },
          "ChildTableTypesToInclude": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of child table types to include for /list endpoints. If empty, no child table types will be included",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "Query Request Definition"
      },
      "QueryRequestFilterCondition": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string",
            "description": "The name of the field the condition applies to",
            "nullable": true
          },
          "ComparisonType": {
            "enum": [
              "None",
              "Equal",
              "LessThan",
              "GreaterThan",
              "NotEqual",
              "IsIn",
              "IsNotIn",
              "IsNull",
              "IsNotNull",
              "LessThanOrEqualTo",
              "GreaterThanOrEqualTo",
              "Like"
            ],
            "type": "string",
            "description": "The type of comparison to perform on the field"
          },
          "Values": {
            "type": "array",
            "items": {},
            "description": "The value(s) to perform the test against. Multiple values are only supported for IsIn and NotIsIn Comparisons. No values are needed for IsNull and NotIsNull tests.",
            "nullable": true
          },
          "BeginGroup": {
            "type": "boolean",
            "description": "When true, this condition starts a new group (open paren is added to the SQL)"
          },
          "EndGroup": {
            "type": "boolean",
            "description": "When true, this condition terminates a group (close paren is added to the SQL)"
          },
          "OrWithNext": {
            "type": "boolean",
            "description": "True if this condition is to be ORed with the next. If false, the condition will be ANDed"
          }
        },
        "additionalProperties": {},
        "description": "Used in the API to define a filter condition for a record request"
      },
      "QueryRequestSortOrder": {
        "type": "object",
        "properties": {
          "FieldName": {
            "type": "string",
            "description": "The field name to sort on",
            "nullable": true
          },
          "Descending": {
            "type": "boolean",
            "description": "If true, sort descending"
          }
        },
        "additionalProperties": {},
        "description": "Used to define the sort order for record requests"
      },
      "RFI": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 8",
            "format": "int32",
            "readOnly": true
          },
          "RFI_ID": {
            "type": "integer",
            "description": "Primary Key",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "Required to be set before the record can leave Draft mode. If Auto Increment Number is turned on in Record Settings, this will always be read-only."
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "Read-only description for LocationID",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 10",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "description": "Read-only description for ImportanceID",
            "nullable": true,
            "readOnly": true
          },
          "DisciplineID": {
            "type": "integer",
            "description": "Lookup List Section 127",
            "format": "int32",
            "nullable": true
          },
          "Discipline": {
            "maxLength": 150,
            "type": "string",
            "description": "Read-only description for DisciplineID",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "description": "Read-only. This will be automatically set to the CompanyID for AuthorContactID",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "description": "Read-only description for AuthorCompanyID",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "description": "The ContactID of the record's Author. If not set, it will default to the ContactID of the user creating the record.",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "description": "Read-only description for AuthorContactID",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "description": "Read-only. This will be automatically set to the CompanyID for ResolutionContactID",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "description": "Read-only description for ResolutionCompanyID",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "description": "The ContactID of the user providing the Resolution",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "description": "Read-only description for ResolutionContactID",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "Read-only. This will be automatically set to the Comment with a type of Details",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "description": "Read-only. This will be automatically set to the Comment with a type of Details",
            "nullable": true,
            "readOnly": true
          },
          "IsCostImpact": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "CostNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsSchedImpact": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "Days": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScheduleNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsDwgUpdateRequired": {
            "enum": [
              "Yes",
              "No",
              "NotSure"
            ],
            "type": "string",
            "nullable": true
          },
          "DrawingNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsDwgUpdated": {
            "type": "boolean",
            "nullable": true
          },
          "ResponsibleCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResponsibleCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "Request For Information"
      },
      "RecordInformation": {
        "type": "object",
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The primary key of the project the record belongs to.\r\nThis may be 0 for records that only exist at the portfolio level, such as Companies",
            "format": "int32"
          },
          "ProjectIsAccessible": {
            "type": "boolean",
            "description": "Indicates whether the caller is allowed to access the project this record belongs to or not."
          },
          "TableType": {
            "type": "integer",
            "description": "The ProjectSight record type.",
            "format": "int32"
          },
          "TableTypeIsAccessible": {
            "type": "boolean",
            "description": "Indicates whether the caller is allowed to access the table type for this record in the project or not"
          },
          "PrimaryKey": {
            "type": "integer",
            "description": "The primary key for the record. This will be unique within the requested portfolio, but not among portfolios.",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "description": "The unique identifier for this record.",
            "format": "uuid"
          },
          "OperationType": {
            "enum": [
              "Add",
              "Update",
              "Delete"
            ],
            "type": "string",
            "description": "The controlling operation for the record within the requested time frame."
          },
          "LastModified": {
            "type": "string",
            "description": "The latest timestamp for the record within the requested timeframe.\r\nThe value will be in universal sortable format, yyyy-MM-dd HH:mm:ssZ",
            "nullable": true
          }
        },
        "additionalProperties": {},
        "description": "This class provides results for /records/changes endpoints\r\nThis class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "RecordLink": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 15",
            "format": "int32",
            "readOnly": true
          },
          "RecordLinkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ParentRecordID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "LinkedRecordID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LinkedTableType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LinkedURL": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "RecordNumber": {
            "maxLength": 999999,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordTitle": {
            "maxLength": 999999,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CommentID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IncludeInNotifications": {
            "type": "boolean",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "RegionOfWork": {
        "required": [
          "RegionID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 21",
            "format": "int32",
            "readOnly": true
          },
          "RegionsOfWorkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "RegionID": {
            "type": "integer",
            "description": "Lookup List Section 150",
            "format": "int32"
          },
          "Region": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Report": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique id for the report",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title",
            "nullable": true
          },
          "Subtitle": {
            "type": "string",
            "description": "The subtitle",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description",
            "nullable": true
          },
          "DisplayDescription": {
            "type": "string",
            "description": "The display description for the report",
            "nullable": true
          },
          "IsDefaultSingle": {
            "type": "boolean",
            "description": "True if this is the default report to used when executing a report for a single record"
          },
          "IsDefaultMultiple": {
            "type": "boolean",
            "description": "True if this is the default report to be used when executing a report for multiple records"
          }
        },
        "additionalProperties": {},
        "description": "Provides information about a report\r\nThis class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "ReportRequest": {
        "type": "object",
        "properties": {
          "ReportID": {
            "type": "integer",
            "description": "The id of the report to execute",
            "format": "int32"
          },
          "PrimaryKeys": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The list of primary keys to include in the report.",
            "nullable": true
          },
          "IncludeAttachments": {
            "type": "boolean",
            "description": "When true, the appropriate attachments for each record will be embedded in the report. Note that this will be ignored if EachRecordInItsOwnFile is false."
          },
          "EachRecordInItsOwnFile": {
            "type": "boolean",
            "description": "When true, the report output for each requested record will be placed in its own file and the resultant file will be a zip file.\r\nWhen false, all requested records will be placed in a single report file and the resultant file will be a PDF."
          }
        },
        "additionalProperties": false,
        "description": "Used to initiate the generation of a report"
      },
      "RevenueCode": {
        "required": [
          "Code"
        ],
        "type": "object",
        "properties": {
          "RevenueCodeID": {
            "type": "integer",
            "description": "The primary key for the revenue code",
            "format": "int32"
          },
          "Code": {
            "type": "string",
            "description": "The Revenue Code. This is unique within the Project (if unlocked) or Portfolio (if locked)"
          },
          "Description": {
            "type": "string",
            "description": "The optional description for the revenue code",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "description": "The primary key of the Project this item is associated with. A value of 0 indicates it is a portfolio-level item",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database\r\nThis will be ignored on update."
          },
          "LastModified": {
            "type": "string",
            "description": "The date/time this item was last modified\r\nThis will be ignored on update.",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "Represents one Revenue Code"
      },
      "SafetyNotice": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 68",
            "format": "int32",
            "readOnly": true
          },
          "SafetyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 152",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 161",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "LocationDetails": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Witnesses": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "EmployeesInvolved": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "EquipmentInvolved": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "MaterialInvolved": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Responsibility": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "FirstAidBy": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "PreventionNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "CaseNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "SafetyCodeRegulation": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "SafetyJurisdiction": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SnapshotForecastToCompleteItem": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 123",
            "format": "int32",
            "readOnly": true
          },
          "BudgetSnapshotForecastToCompleteItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SnapshotItemId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Description": {
            "maxLength": 500,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UOMID": {
            "type": "integer",
            "description": "Lookup List Section 103",
            "format": "int32",
            "readOnly": true
          },
          "UOM": {
            "maxLength": 150,
            "type": "string",
            "description": "The actual display field for the UOM. It is a combination of the code and description, if available.",
            "nullable": true,
            "readOnly": true
          },
          "UOMCode": {
            "maxLength": 30,
            "type": "string",
            "description": "The Code for the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMDescription": {
            "maxLength": 150,
            "type": "string",
            "description": "The Description of the UOM from the lookup list.",
            "nullable": true,
            "readOnly": true
          },
          "UOMIsUnitPrice": {
            "type": "boolean",
            "description": "The Unit Price flag from the lookup list.",
            "readOnly": true
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UnitPrice": {
            "type": "number",
            "description": "Amount divided by Quantity.",
            "format": "double",
            "readOnly": true
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "SubContractCO": {
        "required": [
          "AuthorContactID",
          "ContractID",
          "Date",
          "Description",
          "SCONumber",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 161",
            "format": "int32",
            "readOnly": true
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ContractID": {
            "type": "integer",
            "format": "int32"
          },
          "ContractNumberAndDescription": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContractNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The Contract's ContractNumber and Description combined",
            "nullable": true,
            "readOnly": true
          },
          "SCONumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Sequence": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromSignedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromSignedByTitle": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 500,
            "minLength": 1,
            "type": "string"
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "NTPDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ExecutedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "CategoryID": {
            "type": "integer",
            "description": "Lookup List Section 153",
            "format": "int32",
            "nullable": true
          },
          "Category": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 500,
            "type": "string",
            "nullable": true
          },
          "ApprovedDays": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "SubstantialComplDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "NetPrevApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "NetPrevApprovedDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ApprovedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "IsApprovedForBudget": {
            "type": "boolean",
            "nullable": true
          },
          "IsLockedBySCO": {
            "type": "boolean",
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ERPIntegrationStatus": {
            "enum": [
              "NotIntegrated",
              "Requested",
              "Successful",
              "Failed"
            ],
            "type": "string",
            "nullable": true
          },
          "ERPStatusMessage": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ERPCode": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SubContractCOPCOItemLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubContractCOPCOItemLink"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SubContractCOPCOItemLink": {
        "required": [
          "PCOItemID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 162",
            "format": "int32",
            "readOnly": true
          },
          "PCOItemID": {
            "type": "integer",
            "format": "int32"
          },
          "ChangeOrderID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "PCOID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PCONumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "BdgtCodeID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BdgtCode": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CostAppliedAmount": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostAppliedQuantity": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CostAppliedUnitPrice": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "UOM": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CostAllocationCode": {
            "enum": [
              "None",
              "AddToPendingCommitment",
              "AddToApproximateCommitment",
              "AddToUncommittedCost",
              "UseUncommittedCostsPending",
              "UseUncommittedCostsApproximate",
              "NoCostAllocation",
              "ItemCancelled",
              "LinkedNone",
              "LinkedAddToPendingCommitment",
              "LinkedAddToApproximateCommitment",
              "LinkedAddToUncommittedCost",
              "LinkedUseUncommittedCostsPending",
              "LinkedUseUncommittedCostsApproximate",
              "LinkedNoCostAllocation"
            ],
            "type": "string",
            "readOnly": true
          },
          "CostAppliedHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Submittal": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Number",
          "Revision",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 45",
            "format": "int32",
            "readOnly": true
          },
          "SubmittalRegID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "IsClosed": {
            "type": "boolean",
            "nullable": true
          },
          "IsPhysicalSubmittal": {
            "type": "boolean",
            "nullable": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Revision": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "IsLatest": {
            "type": "boolean",
            "readOnly": true
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "DateResolved": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ResolutionCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResolutionContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResolutionContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResponsibleCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResponsibleCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Resolution": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SpecSection": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SpecSubSection": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 155",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 169",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SubmittalPackageID": {
            "type": "integer",
            "description": "Lookup List Section 9",
            "format": "int32",
            "nullable": true
          },
          "SubmittalPackage": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SubmittalID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SubmittalDescription": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ApprovalTime": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "FabricationTime": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "DeliveryTime": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IsLeadTimeIncl": {
            "type": "boolean",
            "nullable": true
          },
          "ActualDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ReturnedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ItemSortOrder": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SubmittalItem": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Details",
          "ItemNumber",
          "Number",
          "Revision",
          "Subject",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 58",
            "format": "int32",
            "readOnly": true
          },
          "SubmittalRegID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SubmittalID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean",
            "nullable": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Revision": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Subject": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ResponsibleCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ResponsibleCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Details": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string"
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "SpecSection": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SpecSubSection": {
            "maxLength": 150,
            "type": "string",
            "nullable": true
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 155",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 169",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ActualDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ReturnedDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ScheduledDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ActualDeliveryDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "IsDraft": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "SubmittalPackage": {
        "required": [
          "AuthorContactID",
          "DateCreated",
          "Description",
          "Number",
          "Revision",
          "SpecSectionID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 52",
            "format": "int32",
            "readOnly": true
          },
          "SubmittalID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "IsClosed": {
            "type": "boolean",
            "nullable": true
          },
          "Revision": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "SpecSectionID": {
            "type": "integer",
            "format": "int32"
          },
          "SpecSection": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateCreated": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 157",
            "format": "int32",
            "nullable": true
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "DateDue": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "ImportanceID": {
            "type": "integer",
            "description": "Lookup List Section 168",
            "format": "int32",
            "nullable": true
          },
          "Importance": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Trade": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "AuthorPackageNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "LocationID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SubmittalItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubmittalItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "RecordComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "Assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Assignee"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Transmittal": {
        "required": [
          "AuthorContactID",
          "Date",
          "Number",
          "TypeID",
          "WorkflowState"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 9",
            "format": "int32",
            "readOnly": true
          },
          "TransmittalID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Number": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Date": {
            "minLength": 1,
            "type": "string",
            "format": "date"
          },
          "TypeID": {
            "type": "integer",
            "description": "Lookup List Section 46",
            "format": "int32"
          },
          "Type": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "FromContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FromAddress": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "ToCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ToContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ToAddress": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "DeliveredViaID": {
            "type": "integer",
            "description": "Lookup List Section 8",
            "format": "int32",
            "nullable": true
          },
          "DeliveredVia": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TrackingNumber": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "Remarks": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "TransmittedFor": {
            "maxLength": 999999,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TransmittedFor1": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor2": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor3": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor4": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor5": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor6": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor7": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor8": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor9": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedFor10": {
            "type": "boolean",
            "nullable": true
          },
          "TransmittedForOther": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "AcknowledgeRequired": {
            "type": "boolean",
            "nullable": true
          },
          "AcknowledgeReceived": {
            "type": "boolean",
            "nullable": true
          },
          "AcknowledgedByCompanyID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AcknowledgedByCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AcknowledgedByContactID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "AcknowledgedByContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AcknowledgeDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "AcknowledgeNotes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "AuthorCompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "AuthorCompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "AuthorContactID": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WorkflowStatePermissionLevel": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WorkflowState": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowStateName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsLocked": {
            "type": "boolean",
            "readOnly": true
          },
          "SharedWith": {
            "enum": [
              "EntireProject",
              "ParticipatingCompanies"
            ],
            "type": "string",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "TransmittalItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransmittalItem"
            },
            "nullable": true
          },
          "RecordToRecordLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecordLink"
            },
            "nullable": true
          },
          "CourtesyCopies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtesyCopy"
            },
            "nullable": true
          },
          "FileLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLink"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "TransmittalItem": {
        "required": [
          "ItemNumber"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 89",
            "format": "int32",
            "readOnly": true
          },
          "TransmittalItemID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "TransmittalID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ItemNumber": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "Quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ItemID": {
            "type": "integer",
            "description": "Lookup List Section 19",
            "format": "int32",
            "nullable": true
          },
          "Item": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Reference": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Notes": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "TransmittedForID": {
            "type": "integer",
            "description": "Lookup List Section 18",
            "format": "int32",
            "nullable": true
          },
          "TransmittedFor": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "StatusID": {
            "type": "integer",
            "description": "Lookup List Section 42",
            "format": "int32",
            "nullable": true
          },
          "Status": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "SortOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "TypeOfWork": {
        "required": [
          "DescriptionID"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 22",
            "format": "int32",
            "readOnly": true
          },
          "TypesOfWorkID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "DescriptionID": {
            "type": "integer",
            "description": "Lookup List Section 20",
            "format": "int32"
          },
          "Description": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "UDF": {
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "The table type for the UDF",
            "format": "int32"
          },
          "TableName": {
            "type": "string",
            "description": "The table name for the UDF",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the UDF",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Amount",
              "Boolean",
              "Currency",
              "Date",
              "DateTime",
              "GeneralNumber",
              "Integer",
              "LookupList",
              "Memo",
              "Percentage2",
              "Percentage4",
              "Quantity",
              "Text",
              "Time",
              "Location",
              "CSICode"
            ],
            "type": "string",
            "description": "The type of the UDF"
          },
          "Caption": {
            "type": "string",
            "description": "The current caption for the UDF",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "The size of the field",
            "format": "int32"
          },
          "LookupListID": {
            "type": "integer",
            "description": "For type LookupList, the ID of the lookup list associated with this field",
            "format": "int32"
          }
        },
        "additionalProperties": {},
        "description": "Provides information about a UDF\r\nThis class is intended for consumption only, not updates, which is why all of the properties are readonly"
      },
      "UnitOfMeasure": {
        "required": [
          "Code"
        ],
        "type": "object",
        "properties": {
          "UnitOfMeasureID": {
            "type": "integer",
            "description": "The primary key for the record",
            "format": "int32"
          },
          "Code": {
            "type": "string",
            "description": "The UOM Code. This is unique within the Project (if unlocked) or Portfolio (if locked)"
          },
          "Description": {
            "type": "string",
            "description": "The optional description",
            "nullable": true
          },
          "IsUnitPrice": {
            "type": "boolean",
            "description": "Whether or not UOM represents a Unit Price quantity"
          },
          "IsStandardLumpSum": {
            "type": "boolean",
            "description": "When true, this record is the standard Lump Sum record. It may not be deleted or have its IsUnitPrice flag changed."
          },
          "ProjectID": {
            "type": "integer",
            "description": "The primary key of the Project this item is associated with. A value of 0 indicates it is a portfolio-level item",
            "format": "int32"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Returns a boolean value that indicates whether or not this item has been deleted in the database\r\nThis will be ignored on update."
          },
          "LastModified": {
            "type": "string",
            "description": "The date/time this item was last modified\r\nThis will be ignored on update.",
            "format": "date-time"
          }
        },
        "additionalProperties": {},
        "description": "Represents one Unit of Measure (UOM) lookup entry"
      },
      "UploadFileRequest": {
        "type": "object",
        "properties": {
          "FolderId": {
            "type": "string",
            "description": "The id of the File Library folder the file should be uploaded to",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "description": "The requested name for the file. If there is already another file with the same name in the folder, this file will be renamed",
            "nullable": true
          },
          "ExternalLocation": {
            "type": "string",
            "description": "The URL obtained from the files/requestLinks endpoint",
            "nullable": true
          },
          "Unmonitored": {
            "type": "boolean",
            "description": "The caller will not monitor the request for completion"
          }
        },
        "additionalProperties": false,
        "description": "Used to initiate the upload of a file to ProjectSight from an external file location obtained from the files/requestLinks endpoint"
      },
      "User": {
        "required": [
          "CompanyID",
          "ContactID",
          "FirstName",
          "GroupID",
          "LastName",
          "UserName"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 27",
            "format": "int32",
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "UserName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "GroupName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "GroupID": {
            "type": "integer",
            "format": "int32"
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32"
          },
          "CompanyName": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ContactID": {
            "type": "integer",
            "format": "int32"
          },
          "ContactName": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "FirstName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "LastName": {
            "maxLength": 25,
            "minLength": 1,
            "type": "string"
          },
          "IsCompliant": {
            "type": "boolean",
            "readOnly": true
          },
          "MarketingConsent": {
            "type": "boolean",
            "readOnly": true
          },
          "LastActivityDate": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "UPSTimeZone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WindowsTimeZone": {
            "maxLength": 100,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ProjectPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPermission"
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "UserGroup": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 29",
            "format": "int32",
            "readOnly": true
          },
          "ID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "Name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "Description": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "Type": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "IsDefault": {
            "type": "boolean",
            "nullable": true
          },
          "CanInviteTeamMemberFromAnyCompany": {
            "type": "boolean",
            "nullable": true
          },
          "CanInviteTeamMemberFromTheirCompany": {
            "type": "boolean",
            "nullable": true
          },
          "CanInviteTeamMemberFromAllRoles": {
            "enum": [
              "None",
              "Some",
              "All"
            ],
            "type": "string",
            "nullable": true
          },
          "CanRemoveTeamMemberFromAllRoles": {
            "enum": [
              "None",
              "Some",
              "All"
            ],
            "type": "string",
            "nullable": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "Weather": {
        "required": [
          "ConditionsID",
          "EndTime",
          "Temp"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 47",
            "format": "int32",
            "readOnly": true
          },
          "WeatherID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DailyReportID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "EndTime": {
            "type": "string",
            "format": "date-span"
          },
          "UOM": {
            "enum": [
              "None",
              "Imperial",
              "Metric"
            ],
            "type": "string",
            "readOnly": true
          },
          "Temp": {
            "type": "integer",
            "format": "int32"
          },
          "ConditionsID": {
            "type": "integer",
            "description": "Lookup List Section 131",
            "format": "int32"
          },
          "Conditions": {
            "maxLength": 150,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Humidity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "WindVelocity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Gusts": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Country": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "State": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "City": {
            "maxLength": 50,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Zip": {
            "maxLength": 20,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LocationID": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "Location": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "IsCurrent": {
            "type": "boolean",
            "readOnly": true
          },
          "IsAutomated": {
            "type": "boolean",
            "readOnly": true
          },
          "ProjectID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "WorkHistory": {
        "required": [
          "ClientName"
        ],
        "type": "object",
        "properties": {
          "TableType": {
            "type": "integer",
            "description": "Table Type 23",
            "format": "int32",
            "readOnly": true
          },
          "WorkHistoryID": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CompanyID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GUID": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "DeleteRequested": {
            "type": "boolean",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "ClientName": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "ContactName": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ContactTelephone": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ProjectNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ProjectName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "ContractNumber": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "ScopeOfWork": {
            "maxLength": 2147483647,
            "type": "string",
            "nullable": true
          },
          "OriginalContractValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ValueOfChanges": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "FinalContractValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "PercentChange": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "StartDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "WhenCreated": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "CreatedByContactID": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "CreatedByDisplayName": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModified": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "LastModifiedBy": {
            "maxLength": 255,
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": {}
      },
      "WorkflowState": {
        "type": "object",
        "properties": {
          "RecordId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ColorHTML": {
            "type": "string",
            "description": "The background color in HTML.",
            "nullable": true
          },
          "TextColorHTML": {
            "type": "string",
            "description": "The text color in HTML",
            "nullable": true
          },
          "ProjectID": {
            "type": "integer",
            "description": "The lookup's projectid",
            "format": "int32"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Indicates whether the workflowstate is the default one"
          },
          "ShowInDashboard": {
            "type": "boolean",
            "description": "Indicates whether the workflowstate selected to show up in dashboard widgets"
          },
          "LocksRecords": {
            "type": "boolean",
            "description": "Indicates whether the workflowstate locks records"
          },
          "SendsNotifications": {
            "type": "boolean",
            "description": "Indicates whether the workflowstate sends notifications"
          },
          "Type": {
            "enum": [
              "None",
              "Draft",
              "CurrentVersion",
              "OldRevision",
              "Pending",
              "Approved",
              "Rejected",
              "Published",
              "Locked",
              "Processing",
              "Closed",
              "MeetingItem_Open",
              "Obsolete",
              "Review",
              "Publishing",
              "Unpublished"
            ],
            "type": "string",
            "description": "Indicates the type of the workflow state"
          }
        },
        "additionalProperties": {},
        "description": "This class is intended for consumption only, not updates, which is why all of the properties are readonly"
      }
    },
    "securitySchemes": {
      "OAuth": {
        "type": "oauth2",
        "description": "Trimble Identity-provided access token.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://id.trimble.com/oauth/token",
            "scopes": {
              "client-name": "The name of the client application."
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://id.trimble.com/oauth/authorize",
            "tokenUrl": "https://id.trimble.com/oauth/token",
            "scopes": {
              "openid": "To get an ID token.",
              "client-name": "The name of the client application."
            }
          }
        }
      }
    }
  }
}